@model GSTEducationERPLibrary.Coordinator.Coordinator

@*@{
        ViewBag.Title = "UpdateLabAsyncVJ";
        Layout = "~/Views/Shared/_LayoutCoordinator.cshtml";
    }*@
<html>
<head>
    @*<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>*@
    @*<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>*@
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

    <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
    <script src="~/Content/plugins/toastr/toastr.min.js"></script>

    <!-- Bootstrap 4 -->

    <script src="~/Content/plugins/moment/moment.min.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <script>
        $(document).ready(function () {
            // Attach a click event handler to the Close button
            $('#closeButton').click(function () {
                // Redirect to the previous page
                window.history.back();
            });

            $('form').click(function (event) {
                event.stopPropagation();
            });

            // Add a click event listener to the save button
            $('#saveButton').click(function (event) {
                event.preventDefault(); // Prevent the default form submission

                debugger;
                var labId = $('#LabId').val();
                var labCapacity = $('#LabCapacity').val();
                var availableSystem = $('#AvailableSystem').val();

                // Validate form data
                if (labId === '' || labCapacity === '' || availableSystem === '') {
                    // Display SweetAlert error message
                    Swal.fire({
                        title: 'Error',
                        text: 'Please fill all fields.',
                        icon: 'error'
                    });
                    return;
                }

                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You are about to Change.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, save it!'
                }).then(async (result) => {
                    // If the user clicks "Yes, save it!" execute your save logic here
                    if (result.isConfirmed) {
                        // Prepare form data to send to the server
                        debugger;
                        var formData = {
                            LabId: labId,
                            LabCapacity: labCapacity,
                            AvailableSystem: availableSystem,
                        };

                        try {
                            // Send form data to the server using AJAX
                            var response = await $.ajax({
                                url: '/Coordinator/RegisterNewLabAsyncVJ',
                                type: 'POST',
                                data: formData,
                                success: function (data) {
                                    // Display success toast
                                    displayToast('Data Saved Successfully.', 'success');

                                    // Redirect to the list page after a slight delay
                                    setTimeout(function () {
                                        window.location.href = '/Coordinator/UpdateLabAsyncVJ';
                                    }, 1000); // Redirect after 1 second
                                },
                                error: function (xhr, status, error) {
                                    console.error('Error:', error);
                                    // Display error toast
                                    displayToast('Error saving followup data. Please try again.', 'error');
                                }
                            });
                        } catch (error) {
                            console.error('Error:', error);
                            // Display error toast
                            displayToast('An unexpected error occurred. Please try again later.', 'error');
                        }
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        // Handle if the user clicked the cancel button
                        Swal.fire('Cancelled', 'Your action has been cancelled.', 'info');
                    }
                });
            });

            function displayToast(message, type) {
                // Display Toastr notification
                toastr[type](message);
            }

            toastr.options = {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                showMethod: 'slideDown',
                timeOut: 40000 // How long the toast will be displayed (in milliseconds)
            };
        });
    </script>

</head>
<body>
    <h2>Update Lab</h2>
    <br />
    @*<h2>Add New Lab</h2>*@

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="card">
                @*<h4>Coordinator</h4>*@
                
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group" hidden>
                    @Html.LabelFor(model => model.LabId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "text-align:center" } })
                        @Html.ValidationMessageFor(model => model.LabId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    @*@Html.LabelFor(model => model.LabCode, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label> Lab Code</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "text-align:center" } })
                        @Html.ValidationMessageFor(model => model.LabCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    @*@Html.LabelFor(model => model.LabName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label> Lab Name</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "text-align:center" } })
                        @Html.ValidationMessageFor(model => model.LabName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    @*@Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label> Branch Code</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BranchCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "text-align:center" } })
                        @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    <label>Lab Capacity</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabCapacity, new { htmlAttributes = new { @class = "form-control", @style = "text-align:center", type = "number", max = "199" } })
                        @Html.ValidationMessageFor(model => model.LabCapacity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    <label>Available System</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AvailableSystem, new { htmlAttributes = new { @class = "form-control", @style = "text-align:center", type = "number", max = "199" } })
                        @Html.ValidationMessageFor(model => model.AvailableSystem, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group" align="center">
                    <label>Lab Added Date</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabCreatedDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "text-align:center" } })
                        @Html.ValidationMessageFor(model => model.LabCreatedDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" align="center">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" id="saveButtons" class="btn btn-success btn-sm" />
                        @*<input type="button" value="Close" id="closeButton" class="btn btn-danger btn-sm" />*@
                        <form action="DetailsLabManagementAsyncVJ">
                            <input type="submit" value="Close" class="btn btn-danger btn-sm" />
                        </form>
                    </div>
                </div>

            </div>

        </div>
        <div>
            @Html.ActionLink("Back to List", "DetailsLabManagementAsyncVJ")
        </div>

    }
    <script>
        // Function to limit the number of characters entered in the input field
        function limitInputLength(input, maxLength) {
            if (input.value.length > maxLength) {
                input.value = input.value.slice(0, maxLength);
            }
        }

        // Event listeners to limit input length
        document.getElementById('LabCapacity').addEventListener('input', function () {
            limitInputLength(this, 200);
        });

        document.getElementById('AvailableSystem').addEventListener('input', function () {
            limitInputLength(this, 200);
        });
    </script>
    @*<script>
            $(document).ready(function () {
                $('#LabCapacity, #AvailableSystem').on('input', function () {
                    var labCapacityValue = parseInt($('#LabCapacity').val().replace(/[^0-9]/g, '')) || 0;
                    var availableSystemValue = parseInt($('#AvailableSystem').val().replace(/[^0-9]/g, '')) || 0;

                    // Ensure AvailableSystem is not more than LabCapacity
                    if (availableSystemValue > labCapacityValue) {
                        availableSystemValue = labCapacityValue;
                        $('#AvailableSystem').val(availableSystemValue);
                    }

                    // Ensure maximum length of 200 characters
                    if ($('#AvailableSystem').val().length > 200) {
                        $('#AvailableSystem').val($('#AvailableSystem').val().substring(0, 200));
                    }
                });
            });
        </script>*@
    <script>
        $(document).ready(function () {
            $('#LabCapacity, #AvailableSystem').on('input', function () {
                var labCapacityValue = parseInt($('#LabCapacity').val().replace(/[^0-9]/g, '')) || 0;
                var availableSystemValue = parseInt($('#AvailableSystem').val().replace(/[^0-9]/g, '')) || 0;

                // Ensure AvailableSystem is not more than LabCapacity
                if (availableSystemValue > labCapacityValue) {
                    availableSystemValue = labCapacityValue;
                    $('#AvailableSystem').val(availableSystemValue);
                }

                // Ensure maximum value of 199 for LabCapacity and AvailableSystem
                if (labCapacityValue > 199) {
                    labCapacityValue = 199;
                    $('#LabCapacity').val(labCapacityValue);
                }
                if (availableSystemValue > 199) {
                    availableSystemValue = 199;
                    $('#AvailableSystem').val(availableSystemValue);
                }
            });
        });
    </script>


</body>
</html>