@model GSTEducationERPLibrary.Coordinator.Coordinator

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <html>
    <head>
        <script src="~/Content/plugins/jquery/jquery.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.min.js"></script>
        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <link href="~/Content/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" />
        <link href="~/Content/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>
        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
    </head>
    <body>
        <div class="container">
            <div class="card " style="padding:15px; margin-right:0px; margin-left:0px; margin-top:10px;">
                    <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 0; right: 0;">&times;</button>
                    <h2>Demo Reschedule</h2>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="row">
                        <div class="col-md-4" hidden>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ScheduleId, "Schedule Id")
                                @Html.EditorFor(model => model.ScheduleId, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ScheduleId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4" hidden>
                            <div class="form-group">
                                @Html.LabelFor(model => model.LabScheduleId, "Lab Schedule Id")
                                @Html.EditorFor(model => model.LabScheduleId, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LabScheduleId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4" hidden>
                            <div class="form-group">
                                @Html.LabelFor(model => model.BatchCode, "Batch Code")
                                @Html.EditorFor(model => model.BatchCode, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BatchCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.BatchName, "Demo Name")
                                @Html.EditorFor(model => model.BatchName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.BatchName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CourseName, "Course Name")
                                @Html.EditorFor(model => model.CourseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4" hidden>
                            <label class="col-md-4">Course Code</label>
                            @Html.EditorFor(model => model.CourseCode, new { htmlAttributes = new { @class = "form-control", @id = "CourseCode", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.CourseCode, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.TrainerName, "Trainer Name")
                                <select id="StaffName" name="TrainerName" class="form-control" value="@ViewBag.TrainerName"></select>
                                @Html.ValidationMessageFor(model => model.TrainerName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="bootstrap-timepicker col-md-4">
                            <div class="form-group">
                                <label>Start Time </label>
                                <div class="input-group date" id="startTimepicker" data-target-input="nearest">
                                    <input type="text" id="startTime" name="StartTime" class="form-control datetimepicker-input" data-target="#startTimepicker" value="@ViewBag.StartTime" />
                                    <div class="input-group-append" data-target="#startTimepicker" data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="far fa-clock"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="bootstrap-timepicker col-md-4">
                            <div class="form-group">
                                <label>End Time </label>
                                <div class="input-group date" id="endTimepicker" data-target-input="nearest">
                                    <input type="text" id="endTime" name="EndTime" class="form-control datetimepicker-input" data-target="#endTimepicker" value="@ViewBag.EndTime" />
                                    <div class="input-group-append" data-target="#endTimepicker" data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="far fa-clock"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ScheduledAddedByStaffCode, "Demo Arranged By")
                                @Html.DropDownListFor(model => model.ScheduledAddedByStaffCode, (IEnumerable<SelectListItem>)ViewBag.Staff, new { @class = "form-control", required = "required" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.StartDate, "Start Date ")
                                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control " + ViewBag.StartT, @id = "StartDate", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required" } })

                                @*@Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" ,@ViewBag.StartT } })*@
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.LabName, "Lab Name")
                                @Html.HiddenFor(model => model.LabCode)
                                <select id="LabName" name="LabName" class="form-control" required="required">
                                    <option value="@ViewBag.LabCode">@ViewBag.LabName</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.LabName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4" hidden>
                            <div class="form-group">
                                @Html.LabelFor(model => model.StatusName, "Status")
                                @Html.EditorFor(model => model.StatusName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.StatusName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(model => model.RescheduleDate, "Demo Reschedule Date ")
 
                                @Html.EditorFor(model => model.RescheduleDate, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "RescheduleDate" } })
                                @Html.ValidationMessageFor(model => model.RescheduleDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="form-group col-md-12 text-center">
                        <div class="col-md-12">
                            <input type="submit" value="Save" id="RescheduleDemo" class="btn btn-success" />
                            <button type="button" class="btn btn-danger" id="cancel-button" onclick="history.go()">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            @*</div>*@

            <script type="text/javascript">
    $(document).ready(function(){
        // Access CourseCode value from the model
        var coursecode = "@Model.CourseCode"; // Use quotes to ensure it's treated as a string
        debugger;
        $.ajax({
            type: "GET",
            url: "@Url.Action("CourseTrainerNameKKAsync", "Coordinator")",
            data: { coursecode: coursecode },
            dataType: "json",
            success: function (data) {
                var v = "";
                $.each(data, function (i, v1) {
                    v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                });
                $("#StaffName").html(v);
            },
            error: function (xhr, status, error) {
                console.error("Error:", error);
            }
        });
    });
            </script>
            <script>
            $(document).ready(function () {
                // Initialize start time picker
                $('#startTimepicker').datetimepicker({
                    format: 'LT'
                });

                // Initialize end time picker
                $('#endTimepicker').datetimepicker({
                    format: 'LT'
                });
                $("#StartDate").change(function () {
            debugger;
            getLabDetails();

        });

        function getLabDetails() {
            debugger;
           /* var NoOfStudent = $("#NoOfStudent").val();*/
            var ExpectedDate = $("#StartDate").val();
            var StartTime = $("#startTimepicker").datetimepicker('date').toISOString();
            var EndTime = $("#endTimepicker").datetimepicker('date').toISOString();

            $.ajax({
                url: "@Url.Action("LabNameListAsync", "Coordinator")",
                type: 'POST',
                data: {
                   /* NoOfStudent: NoOfStudent,*/
                    ExpectedDate: ExpectedDate,
                    StartTime: StartTime,
                    EndTime: EndTime
                },
                success: function (data) {
                    var result = JSON.parse(data);
                    debugger;
                    var v = "<option>---Select---</option>";
                    $.each(result, function (i, item) {
                        v += "<option value='" + item.LabCode + "'>" + item.LabName + "</option>";
                    });
                    $("#LabName").html(v);
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
        }

            });
            </script>
            <script>
                $(document).ready(function () {
                    // Attach click event to the Save button
                    $('form').submit(function (e) {
                        var startDate = new Date($('#StartDate').val());
                        var rescheduleDate = new Date($('#RescheduleDate').val());

                        // Compare start date and reschedule date
                        if (rescheduleDate > startDate) {
                            // Show Toastr notification if reschedule date is greater than start date
                            displayToast('Choose Start date after Reschedule date,  Please change the start date.', 'error');
                            e.preventDefault(); // Prevent form submission
                        }
                    });
                });
                function displayToast(message, type) {
                    toastr[type](message);
                }
                toastr.options = {
                    closeButton: true,
                    progressBar: true,
                    positionClass: 'toast-top-right',
                    showMethod: 'slideDown',
                    timeOut: 4000
                };
            </script>

            <script>
                // Wait for the document to fully load before executing the script
                $(document).ready(function () {
                    // Get the save button element
                    var saveButton = document.getElementById('RescheduleDemo');
                    saveButton.addEventListener('click', async function (event) {
                        event.preventDefault(); // Prevent the default form submission
                        debugger;
                        // Get form data
                        var ScheduleId = document.getElementById('ScheduleId').value;
                        var LabScheduleId = document.getElementById('LabScheduleId').value;
                        var TrainerName = document.getElementById('StaffName').value;
                        var LabCode = document.getElementById('LabName').value;
                        var StartDate = document.getElementById('StartDate').value;
                        var StartTime = document.getElementById('startTime').value;
                        var EndTime = document.getElementById('endTime').value;
                        var ScheduledAddedByStaffCode = document.getElementById('ScheduledAddedByStaffCode').value;
                        var RescheduleDate = document.getElementById('RescheduleDate').value;
                        // Show confirmation dialog
                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'You are about to save your changes.',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, save it!'
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                // Prepare form data to send to the server
                                var formData = new FormData();
                                formData.append('ScheduleId', ScheduleId);
                                formData.append('LabScheduleId', LabScheduleId);
                                formData.append('TrainerName', TrainerName);
                                formData.append('LabName', LabCode);
                                formData.append('StartDate', StartDate);
                                formData.append('StartTime', StartTime);
                                formData.append('EndTime', EndTime);
                                formData.append('ScheduledAddedByStaffCode', ScheduledAddedByStaffCode);
                                formData.append('RescheduleDate', RescheduleDate);

                                try {

                                    var response = await fetch('/Coordinator/UpdateResheduleDemoKKAsync', {
                                        method: 'POST',
                                        body: formData
                                    });

                                    if (response.ok) {
                                        Swal.fire('Success!', 'Reshedule Demo Successfully.', 'success').then(() => {
                                            // Redirect to the list page after saving
                                            window.location.href = '/Coordinator/ListDemoKKAsync';
                                        });
                                    } else {
                                        Swal.fire('Error', 'Error saving demo reschedule. Please try again.', 'error');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                    Swal.fire('Error', 'An unexpected error occurred. Please try again later.', 'error');
                                }
                            }
                        });
                    });
                });

            </script>
</body>
</html>
}