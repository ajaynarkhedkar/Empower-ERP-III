
@model GSTEducationERPLibrary.Placement.Placement
@functions {
	string GetBadgeClass(string round)
	{
		switch (round)
		{
			case "Selected":
				return "bg-success";
			case "Scheduled":
				return "bg-primary";
			case "Rejected":
			case "Cancelled":
				return "bg-danger";
			case "InProcess":
			case "Not Attended":
			case "No Feedback":
				return "bg-warning";
			case "Offered":
				return "bg-blue";
			default:
				return ""; // Add a default class if needed
		}
	}
}

<html>
<head>
	<link rel="stylesheet" href="~/Content/Admin/css/UI.css" />
	<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css">
	<style>
		.card-body > .table > thead > tr > th, .card-body > .table > thead > tr > td {
			height: 20px; /* Set your desired height */
			padding: 5px; /* Adjust padding if needed */
			margin: 0; /* Adjust margin if needed */
		}

		.table td {
			padding: 5px !important;
		}
	</style>
	<style>
		/* ... (your existing styles) */

		.floating-buttons {
			display: none;
			position: absolute;
			top: 100%; /* Set to 100% to position below the badge */
			left: 50%;
			transform: translate(-50%, 0);
			z-index: 1;
			width: 100px; /* Set the desired width */
		}

			.floating-buttons button {
				margin: 3px;
				padding: 0px;
				font-size: 10px; /* Adjust the font size as needed */
				width: 100%; /* Set the button width to fill the container */
				background: linear-gradient(to right, #33CCCC, #3388CC); /* Use your gradient colors */
				color: #fff;
				border: 1px solid #33CCCC;
			}
				.floating-buttons button:hover {
					background: linear-gradient(to right, #3388CC, #33CCCC); /* Adjust colors for hover effect */
				}

		.badge-container {
			position: relative;
			display: inline-block;
			cursor: pointer;
		}
	</style>
</head>
<body>

	<br />

		<div class="card-body">
			@Html.HiddenFor(model => model.StudentCode, new { id = "StudentCode" })
			<div class="row">
				<div class="col-md-6">
					@Html.LabelFor(model => model.StudentName)
					@Model.StudentName
				</div>
				<div class="col-md-6">
					@Html.LabelFor(model => model.CourseName)
					@Model.CourseName
				</div>
			</div>
			<table id="InterviewRound" class="table table-bordered table-striped" style="text-align:center">
				<thead>
					<tr>
						<th hidden></th>
						<th hidden></th>
						<th hidden></th>
						<th rowspan="2" style="vertical-align:middle">
							@Html.DisplayNameFor(model => model.CompanyName)
						</th>
						<th rowspan="2" style="vertical-align:middle">
							@Html.DisplayNameFor(model => model.CTC)
						</th>
						<th rowspan="2" style="vertical-align:middle">
							@Html.DisplayNameFor(model => model.DesignationName)
						</th>
						<th rowspan="2" style="vertical-align:middle">
							@Html.DisplayNameFor(model => model.Location)
						</th>
						<th colspan="3" style="text-align:center;">Interview Round</th>
						<th rowspan="2" style="vertical-align:middle">
							Action
						</th>
					</tr>
					<tr>
						<th>
							@Html.DisplayNameFor(model => model.Round1)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Round2)
						</th>
						<th>
							@Html.DisplayNameFor(model => model.Round3)
						</th>
					</tr>
				</thead>
				<tbody>

					@if (Model != null && Model.lstAllRoundDetails != null)
					{
						for (int i = 0; i < Model.lstAllRoundDetails.Count; i++)
						{
							var item = Model.lstAllRoundDetails[i];

					<tr>
						<td hidden>
							@Html.HiddenFor(modelItem => item.OpeningCode)
						</td>
						<td hidden>
							@Html.HiddenFor(modelItem => item.PlacementId)
						</td>
						<td hidden>
							@Html.HiddenFor(modelItem => item.InterviewRound)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.CompanyName)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.CTC)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.DesignationName)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.Location)
						</td>
						<td>

							@if (string.IsNullOrEmpty(item.Round2) && item.Round1 != "Scheduled")
							{
								if (item.Round1 == "Cancelled")
								{
									<div class="badge-container">
										<span class="badge @(GetBadgeClass(item.Round1))" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="First" title="Reschedule Interview" onclick="showInterviewDetails(this)">
											@Html.DisplayFor(modelItem => item.Round1)
										</span>

										<div class="floating-buttons">
											<button class="btn btn-outline-primary"data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="First" onclick="showInterviewDetails(this)">Edit Performance</button>
											<button class="btn btn-outline-primary"data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="First"onclick="RescheduleInterview(this)">Reschedule Interview</button>
										</div>
									</div>
								}
								else
								{
									<span class="badge @(GetBadgeClass(item.Round1))" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="First" title="Edit Performance" onclick="showInterviewDetails(this)">
										@Html.DisplayFor(modelItem => item.Round1)
									</span>
								}
							}

							else
							{
								<span class="badge @(GetBadgeClass(item.Round1))">@Html.DisplayFor(modelItem => item.Round1)</span>

							}
						</td>
						<td>
							@if (item.Round1 == "Selected" && string.IsNullOrEmpty(item.Round2))
							{
								<a href="#" class="InterviewSchedule" data-toggle="modal" data-target="#resultModal" data-id="@item.PlacementId" data-round="Second" title="Schedule Interview">Schedule</a>
							}
							else if (string.IsNullOrEmpty(item.Round3) && item.Round2 != "Scheduled" && item.Round2 != "Offered")
								{
									if (item.Round2 == "Cancelled")
									{
										<div class="badge-container">
											<span class="badge @(GetBadgeClass(item.Round2))">
												@Html.DisplayFor(modelItem => item.Round2)
											</span>

											<div class="floating-buttons">
												<button class="btn btn-outline-primary" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Second" onclick="showInterviewDetails(this)">Edit Performance</button>
												<button class="btn btn-outline-primary" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Second" onclick="RescheduleInterview(this)">Reschedule Interview</button>
											</div>
										</div>
									}
									else
									{
										<span class="badge @(GetBadgeClass(item.Round2))" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Second" title="Edit Performance" onclick="showInterviewDetails(this)">
											@Html.DisplayFor(modelItem => item.Round2)
										</span>
									}
								}
							

								else
									{
									<span class="badge @(GetBadgeClass(item.Round2))">@Html.DisplayFor(modelItem => item.Round2)</span>

									}
							
						</td>
						<td>
							@if (item.Round2 == "Selected" && item.Round3 == "")
							{
								<a href="#" class="InterviewSchedule" data-toggle="modal" data-target="#resultModal" data-id="@item.PlacementId" data-round="Third" title="Schedule Interview">Schedule</a>
							}
							else if (item.Round3 != "Scheduled" && item.Round3 != "Offered")
							{
								if (item.Round3 == "Cancelled")
								{
									<div class="badge-container">
										<span class="badge @(GetBadgeClass(item.Round3))">
											@Html.DisplayFor(modelItem => item.Round3)
										</span>

										<div class="floating-buttons">
											<button class="btn btn-outline-primary" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Third" onclick="showInterviewDetails(this)">Edit Performance</button>
											<button class="btn btn-outline-primary" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Third" onclick="RescheduleInterview(this)">Reschedule Interview</button>
										</div>
									</div>
								}
								else
								{
									<span class="badge @(GetBadgeClass(item.Round3))" data-student-code="@item.StudentCode" data-opening-code="@item.OpeningCode" data-round="Third" title="Edit Performance" onclick="showInterviewDetails(this)">
										@Html.DisplayFor(modelItem => item.Round3)
									</span>
								}
							}
							
							else
							{
								<span class="badge @(GetBadgeClass(item.Round3))">@Html.DisplayFor(modelItem => item.Round3)</span>

							}

						</td>
						<td style="text-align:center;">
							<div>
								@if ((item.Round1 == "Selected" && item.Round2 == "Selected" && item.Round3 == "Selected") || (item.Round1 == "Selected" && item.Round2 == "Selected" && item.Round3 == ""))
								{
									<a href="#" class="icon" data-toggle="modal" data-target="#resultModal" data-action="Accept/Reject Offer" data-id="@item.PlacementId" data-company="@item.CompanyName" title="Accept/Reject Offer">
										<!-- Embed the video element -->
										<video width="25" height="25" playsinline loop>
											<source src="~/Content/Admin/icon/score.mp4" type="video/mp4">
										</video>
									</a>
								}
								@if ((item.Round1 == "Selected" && item.Round2 == "Selected" && item.Round3 == "Offered") || (item.Round1 == "Selected" && item.Round2 == "Offered" && item.Round3 == ""))
								{
									<a href="#" class="icon1" onclick="joinCompany(@item.PlacementId)" title="Join Company">
										<video width="25" height="25" playsinline loop>
											<source src="~/Content/Admin/icon/verified.mp4" type="video/mp4">
										</video>
									</a>
								}
								@if ((item.Round1 == "Selected" && item.Round2 == "Offered" || item.Round3 == "Offered"))
								{
									<a href="~/Content/Placement/docs/OfferLetter/@item.FilePth" class="icon2" target="_blank" title="View Offer Letter">
											<video width="25" height="25" playsinline loop>
												<source src="~/Content/Admin/icon/view.mp4" type="video/mp4">
											</video>
										</a>
										}
								</div>
						</td>

					</tr>
						}
					}
				</tbody>
			</table>
			<br />
		</div>
	
	<div class="modal fade" id="resultModal" tabindex="-1" role="dialog" aria-labelledby="resultModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="resultModalLabel">Schedule Interview</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body" style="background-color:transparent">

					<!-- Result form content will be loaded here -->
				</div>
			</div>
		</div>
	</div>
	<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
	<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js" type="text/javascript"></script>
	<script src="~/Content/Admin/js/Icon.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="~/Content/plugins/toastr/toastr.min.js"></script>

	<script>
		$(document).ready(function () {
			$('.badge-container').hover(
				function () {
					// Hover in
					$(this).find('.floating-buttons').fadeIn();
				},
				function () {
					// Hover out
					$(this).find('.floating-buttons').fadeOut();
				}
			);


			$('.InterviewSchedule').click(function () {
				var round = $(this).data('round'); // Use the data-round attribute
				var id = $(this).data('id');

				// Update modal title
				$('#resultModalLabel').text('Schedule Interview for ' + round + ' round');

				// Load partial view into modal body
				$('#resultModal .modal-body').load('/Placement/ScheduleInterviewAsyncSN?id=' + id + '&round=' + round);
			});
			$('.icon').click(function () {
				var id = $(this).data('id');
				var company = $(this).data('company');
				// Update modal title
				$('#resultModalLabel').text('Accept Offer of ' + company);

				// Load partial view into modal body
				$('#resultModal .modal-body').load('/Placement/AcceptORRejectOfferAsyncSN?id=' + id);
			});
			

		});
		
	</script>
	<script>
		function joinCompany(placementId) {
			// Display SweetAlert confirmation
			Swal.fire({
				title: 'Join Company',
				text: 'Are you sure you want to join the company?',
				icon: 'question',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				confirmButtonText: 'Yes, join!',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {
					var feedbackStatus = 12;
					$.ajax({
						url: '/Placement/ViewOfferAndAcceptOfferAsyncSN?placementId=' + placementId,
						type: 'GET',
						success: function (data) {
							$('#resultModalLabel').text('Offer Accepted');

							// Load partial view into modal body
							$('#resultModal .modal-body').html(data);

							// Show the modal
							$('#resultModal').modal('show');
						},
						error: function (error) {
							// Handle error, show a SweetAlert or log the error
							Swal.fire({
								icon: 'error',
								title: 'Error fetching offer details. Please try again.',
								showConfirmButton: false,
								timer: 1500
							});
						}
					});

					// Make an AJAX request to update FeedbackStatus and join the company
					//$.ajax({
					//	url: '/Placement/JoinCompanyAsyncSN?id=' + placementId + '&feedbackStatus=' + feedbackStatus,
					//	type: 'POST',
					//	success: function (data) {
					//		displayToast('Company joined successfully!', 'success');

					//		// Wait for the toast to be shown before redirecting
					//		setTimeout(function () {
					//			window.location.href = '/Placement/ListAllInterviewAsyncSN'; // Replace '/home' with the URL you want to redirect to
					//		}, 2000); // Adjust the timeout value as needed
					//	},
					//	error: function (error) {
					//		// Handle error, show a SweetAlert or log the error
					//		Swal.fire({
					//			icon: 'error',
					//			title: 'Error joining the company. Please try again.',
					//			showConfirmButton: false,
					//			timer: 1500
					//		});
					//	}
					//});
				}
			});
		}
		function showInterviewDetails(element) {
			Swal.fire({
				title: 'Edit Performance',
				text: 'Are you sure you want to edit interview performance?',
				icon: 'question',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				confirmButtonText: 'Yes',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {

					// Retrieve data from the attributes
					var studentCode = $('#StudentCode').val();
					var openingCode = $(element).data('opening-code');
					var round = $(element).data('round');

					// Make an AJAX request to call DetailSingleInterviewRoundAsyncSN
					$.ajax({
						url: '/Placement/DetailSingleInterviewRoundAsyncSN?studentCode=' + studentCode +
							'&openingCode=' + openingCode +
							'&round=' + round,
						type: 'GET',
						success: function (data) {
							$('#resultModalLabel').text('Edit Performance');

							// Load partial view into modal body
							$('#resultModal .modal-body').html(data);

							// Show the modal
							$('#resultModal').modal('show');
						},
						error: function (error) {
							// Handle error, show a SweetAlert or log the error
							Swal.fire({
								icon: 'error',
								title: 'Error fetching interview details. Please try again.',
								showConfirmButton: false,
								timer: 1500
							});
						}
					});
				}
			});
		}
		function RescheduleInterview(element) {
			Swal.fire({
				title: 'Reschedule Interview',
				text: 'Are you sure you want to reschedule interview?',
				icon: 'question',
				showCancelButton: true,
				confirmButtonColor: '#3085d6',
				cancelButtonColor: '#d33',
				confirmButtonText: 'Yes',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {

					// Retrieve data from the attributes
					var studentCode = $('#StudentCode').val();
					var openingCode = $(element).data('opening-code');
					var round = $(element).data('round');
					debugger;
					// Make an AJAX request to call DetailSingleInterviewRoundAsyncSN
					$.ajax({
						url: '/Placement/RescheduleInterviewAsyncSN?studentCode=' + studentCode +
							'&openingCode=' + openingCode +
							'&round=' + round,
						type: 'GET',
						success: function (data) {
							$('#resultModalLabel').text('Reschedule Interview');

							// Load partial view into modal body
							$('#resultModal .modal-body').html(data);

							// Show the modal
							$('#resultModal').modal('show');
						},
						error: function (error) {
							// Handle error, show a SweetAlert or log the error
							Swal.fire({
								icon: 'error',
								title: 'Error fetching interview details. Please try again.',
								showConfirmButton: false,
								timer: 1500
							});
						}
					});
				}
			});
		}

	</script>

	<script>
		function displayToast(message, type) {
			// Display Toastr notification
			toastr[type](message);
		}

		toastr.options = {
			closeButton: true,
			progressBar: true,
			positionClass: 'toast-top-right',
			showMethod: 'slideDown',
			timeOut: 4000 // How long the toast will be displayed (in milliseconds)
		};
	</script>
</body>
</html>


