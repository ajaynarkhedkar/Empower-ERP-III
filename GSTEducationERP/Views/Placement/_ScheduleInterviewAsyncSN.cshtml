@model GSTEducationERPLibrary.Placement.Placement
<html>
<head>
	<link rel="stylesheet" href="~/Content/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" />

	@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.39.0/css/tempusdominus-bootstrap-4.min.css" />*@
	<style>
		/*.location-item:hover {
			background-color: deepskyblue;
			cursor: pointer;
		}

		.location-list-container {
			position: absolute;
			z-index: 1;
			background-color: #fff;
			border: 1px solid #ccc;
			max-height: 150px;
			overflow-y: auto;
			width: 100%;
			box-sizing: border-box;
			margin-top: 20px;*/ /* Adjust margin to control the space between search container and list */
		/*}

			.location-list-container ul {
				list-style: none;
				padding: 0;
				margin: 0;
			}*/
	</style>
	<style>
		.datetimepicker-input {
			pointer-events: none;
		}
	</style>

</head>
<body>

	<div class="card">
		<br />
		@Html.HiddenFor(model => model.PlacementId)
		@Html.HiddenFor(model => model.StudentCode)
		@Html.HiddenFor(model => model.OpeningCode)
		<div class="col-md-10" style="margin-left:50px">
			@Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.StudentName
		</div>
		<br />
		<div class="col-md-10" style="margin-left:50px">
			@Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.CompanyName
		</div>
		<br />
		<div class="col-md-10" style="margin-left:50px">
			@Html.LabelFor(model => model.DesignationName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.DesignationName
		</div>
		<br />
		<div class="col-md-10" style="margin-left:50px">
			@Html.LabelFor(model => model.InterviewRound, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.InterviewRound
		</div>
		<br />
		<div class="input-group col-md-10 " style="margin-left: 50px;">
			@Html.LabelFor(model => model.InterviewDate, htmlAttributes: new { @class = "control-label col-md-5" })
			<div class="col-md-6">
				@Html.EditorFor(model => model.InterviewDate, new { htmlAttributes = new { @class = "form-control col-md-10 datepicker", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required" } })
			</div>
		</div>

		<br />
		<!-- time Picker -->
		<div class="bootstrap-timepicker">
			<div class="input-group col-md-10" style="margin-left:50px">
				<label class="col-md-5">Interview Time</label>
				<div class="col-md-5">
					<div class="input-group date" id="timepicker" data-target-input="nearest">
						<input type="text" name="Time" class="form-control col-md-10 datetimepicker-input" data-target="#timepicker" />
						<div class="input-group-append" data-target="#timepicker" data-toggle="datetimepicker">
							<div class="input-group-text"><i class="far fa-clock"></i></div>
						</div>
					</div>
					<!-- /.input group -->
				</div>
			</div>
		</div>
		<br />
		<div class="input-group col-md-10" style="margin-left:50px">
			@Html.LabelFor(model => model.InterviewMode, htmlAttributes: new { @class = "control-label col-md-5" })
			<div class="col-md-6">
				@Html.DropDownListFor(model => model.InterviewMode, new SelectList(new[] { "Offline", "Online" }), "Select Mode", new { @class = "form-control col-md-10", required = "required" })
			</div>
		</div>
		<br />
		<div class="row justify-content-center">
			<div class="col-md-4 text-center">
				<!-- Added text-center class for centering content -->
				<button type="button" class="btn btn-success btn-block" id="btnSave">Save</button>
			</div>
		</div>
		<br />
	</div>
	<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
	<!-- Bootstrap 4 -->
	<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
	<script src="~/Content/plugins/moment/moment.min.js"></script>
	<!-- Tempusdominus Bootstrap 4 -->
	<script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
	<script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
    $(document).ready(function () {
        // Timepicker
        $('#timepicker').datetimepicker({
            format: 'LT'
        });

        // Save button click event
        $('#btnSave').click(function () {
            // Check if the interview time is selected
            var interviewTime = $('input[name="Time"]').val();
            if (!interviewTime) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please select interview time.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Got it!',
                    background: '#ffffff', // Set background color to white
                    customClass: {
                        title: 'text-danger',
                        popup: 'bg-light',
                        confirmButton: 'btn btn-danger'
                    },
                });
                return;
            }

            // Check if the interview mode is selected
            var interviewMode = $('#InterviewMode').val();
            if (interviewMode === null || interviewMode === "") {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please select interview mode.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Got it!',
                    background: '#ffffff', // Set background color to white
                    customClass: {
                        title: 'text-light',
                        popup: 'bg-light',
                        confirmButton: 'btn btn-danger'
                    },
                });
                return;
            }

            // After validation, show a confirmation dialog
            Swal.fire({
                title: 'Are you sure!',
                text: 'Do you really want to schedule this interview!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, schedule it!',
                cancelButtonText: 'Cancel',
                background: '#ffffff', // Set background color to white
                customClass: {
                    popup: 'bg-light',
                    cancelButton: 'btn btn-danger',
                    confirmButton: 'btn btn-success'
                },
            }).then((result) => {
                // If the user clicks "Yes, schedule it!"
                if (result.isConfirmed) {
					var interviewDate = $('input[name="InterviewDate"]').val();
                    // Proceed with saving the data
                    // Make an AJAX request to the server to call the ScheduleInterviewAsyncSN action
                    $.ajax({
                        type: 'POST',
                        url: '/Placement/ScheduleInterviewAsyncSN', // Replace 'ControllerName' with your actual controller name
                        data: {
                            // Pass the necessary data to the server
                            PlacementId: '@Model.PlacementId',
                            StudentCode:'@Model.StudentCode',
                            OpeningCode:'@Model.OpeningCode',
                            StudentName: '@Model.StudentName',
                            CompanyName: '@Model.CompanyName',
                            DesignationName: '@Model.DesignationName',
                            InterviewRound: '@Model.InterviewRound',
                            InterviewDate: interviewDate,
                            Time: interviewTime,
                            InterviewMode: interviewMode
                        },
                        success: function (response) {
                            // Handle the success response from the server
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Data saved successfully!',
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'Great!',
                                background: '#ffffff', // Set background color to white
                                customClass: {
                                    title: 'text-success',
                                    popup: 'bg-light',
                                    confirmButton: 'btn btn-success'
                                },
                            }).then(function () {
                                // Redirect or perform additional actions after successful save
								window.location.href = '/Placement/ListAllInterviewAsyncSN'; // Replace '/home' with the URL you want to redirect to
                            });
                        },
                        error: function (xhr, status, error) {
                            // Handle the error response from the server
                            console.error('Error:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'An error occurred while saving the data.',
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'Got it!',
                                background: '#ffffff', // Set background color to white
                                customClass: {
                                    title: 'text-danger',
                                    popup: 'bg-light',
                                    confirmButton: 'btn btn-danger'
                                },
                            });
                        }
                    });
                }
            });
        });
    });
	</script>




</body>
</html>