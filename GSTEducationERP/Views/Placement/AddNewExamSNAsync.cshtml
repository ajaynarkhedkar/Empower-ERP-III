@model GSTEducationERPLibrary.Placement.Placement

@*@{
    ViewBag.Title = "AddNewExamSNAsync";
    Layout = "~/Views/Shared/_LayoutPlacement.cshtml";
}*@
<html>
<head>
	<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
	<link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
	<script src="~/Content/plugins/select2/js/select2.min.js"></script>
	<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css">
	<script src="~/Content/plugins/toastr/toastr.min.js"></script>
	<style>
		.error-field {
			border: 2px solid red; /* Add your preferred styling for highlighting */
		}

		label:not(.form-check-label):not(.custom-file-label) {
			font-size: 14px;
		}

		.form-control {
			font-size: 14px !important;
		}

		.input-group > .custom-file {
			font-size: 14px !important;
		}

		.btn:not(:disabled):not(.disabled) {
			font-size: 14px !important;
		}

		.text-danger {
			font-size: 12px !important;
		}

		.select2-container {
			font-size: x-small;
		}

		.select2-container--default .select2-selection--multiple .select2-selection__choice {
			background-color: #33CCCC;
		}
	</style>
</head>
<body>
	@using (Html.BeginForm("AddNewExamSNAsync", "Placement", FormMethod.Post, new { enctype = "multipart/form-data", id = "examForm" }))

	{
		@Html.AntiForgeryToken()

		<div class="card pl-4">
			<h5 style="font-size:16px;font-weight:600">Add Exam</h5>
			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
			<div class="row">
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.CourseCode, "Course Name", htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							@Html.DropDownListFor(model => model.CourseCode, new SelectList(ViewBag.Course, "Value", "Text"), "---Select Course---", new { @class = "form-control col-md-12" })
							@Html.ValidationMessageFor(model => model.CourseCode, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.ExamName, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							@Html.EditorFor(model => model.ExamName, new { htmlAttributes = new { @class = "form-control col-md-12", id = "ExamName", } })
							@Html.ValidationMessageFor(model => model.ExamName, "", new { @class = "text-danger" })
						</div>
						<span id="examNameValidation" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.Technology, "Technology", htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							@Html.DropDownListFor(model => model.Technology, (IEnumerable<SelectListItem>)ViewBag.Technology, new { @class = "form-control col-md-12", @id = "technologyDropdown", @multiple = "multiple" })
							@Html.ValidationMessageFor(model => model.Technology, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
			</div>
			<br />
			<div class="row">
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.SelectedDuration, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							<input type="time" id="SelectedDuration" name="SelectedDuration" value="@Model.SelectedDuration.ToString("HH\\:mm")" class="form-control col-md-6" />

							@Html.ValidationMessageFor(model => model.SelectedDuration, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.TotalMarks, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							@Html.EditorFor(model => model.TotalMarks, new { htmlAttributes = new { @class = "form-control col-md-12", @maxlength = "3" } })
							@Html.ValidationMessageFor(model => model.TotalMarks, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.PassingMarks, htmlAttributes: new { @class = "control-label col-md-4 " })
						<div class="col-md-8">
							@Html.EditorFor(model => model.PassingMarks, new { htmlAttributes = new { @class = "form-control col-md-12", @maxlength = "3" } })
							@Html.ValidationMessageFor(model => model.PassingMarks, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
			</div>
			<br />
			<div class="row">
				@*<div class="col-md-4">
						<div class="input-group">
							@Html.LabelFor(model => model.TestPaperFile, htmlAttributes: new { @class = "control-label col-md-4" })
							<div class="col-md-6">
								<input type="file" name="TestPaperFile" class="form-control col-md-12" />
								@Html.ValidationMessageFor(model => model.TestPaperFile, "", new { @class = "text-danger" })
							</div>
						</div>
					</div>*@
				<div class="col-md-4">
					<div class="input-group">
						@Html.LabelFor(model => model.TotalNoOfQuestion, htmlAttributes: new { @class = "control-label col-md-4" })
						<div class="col-md-8">
							@Html.EditorFor(model => model.TotalNoOfQuestion, new { htmlAttributes = new { @class = "form-control col-md-6", @oninput = "limitIntegerLength(this, 2)" } })
							@Html.ValidationMessageFor(model => model.TotalNoOfQuestion, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
				<div class="input-group col-md-4" id="offer-section">
					@Html.LabelFor(model => model.TestPaperFile, htmlAttributes: new { @class = "control-label col-md-4" })
					<div class="input-group col-md-8">
						<div class="custom-file ">
							<input type="file" class="custom-file-input" name="TestPaperFile" id="TestPaperFile" onchange="updateFileName(this)">
							<label class="custom-file-label" for="TestPaperFile">Choose file</label>
						</div>
					</div>
					<button type="button" class="btn btn-primary btn-xs" style="margin-top:5px;margin-bottom:5px;" id="btnPreviewFile">View</button>
					<span style="margin-left:150px" id="offerValidation" class="text-danger"></span>
				</div>
				<div class="col-md-4">
					<div class="input-group justify-content-end " style="margin-top:10px; padding-right:40px;">
						<div class="col-md-3">
							<button type="submit" class="btn btn-block bg-gradient-success btn-block" onclick="return confirmSave(event)">Save</button>
						</div>
						<div class="col-md-3">
							<button type="button" class="btn btn-block bg-gradient-danger btn-block" onclick="cancelForm()">Clear</button>
						</div>
					</div>
				</div>

			</div>
			<br />
		</div>
	}
	<script>
		$(document).ready(function () {
			$('#CourseCode').on('change', function () {
				$('#ExamName').val('');
				validateExamNameOnCourseChange();
			});
            // Attach event handler to ExamName input field on keyup
            $('#ExamName').on('keyup', function () {
                validateExamName();
			});
			$('#technologyDropdown').select2({
				multiple: true,
				maximumSelectionLength: 5 // Set the maximum number of selections allowed
			});
			$("#btnPreviewFile").hide(); // Initially hide the "View" button
		});

		function validateExamNameOnCourseChange() {
			var examName = $('#ExamName').val();
			var courseCode = $('#CourseCode').val();

			if (examName && courseCode) {
				// If both exam name and course code are provided, clear the exam name field
				$('#ExamName').val('');
				$('#examNameValidation').text(''); // Clear the validation message
			}
		}

           function validateExamName() {
        var examName = $('#ExamName').val();
        var courseCodeText = $('#CourseCode option:selected').text();

			   if (courseCodeText === '---Select Course---' && examName) {
            // Course not selected, but exam name entered
				   $('#examNameValidation').text('Please select a course before entering the exam name.');
				   $('#CourseCode').focus(); // Set focus on the CourseCode dropdown
        } else {
            // Either course is selected or exam name is not entered, clear the validation message
            $('#examNameValidation').text('');
        }

        if (examName && courseCodeText !== '---Select Course---') {
            // Perform AJAX check to see if the exam name already exists
            $.ajax({
                url: '@Url.Action("IsExamAvailableAsyncSN", "Placement")',
                type: 'POST',
                data: { examName: examName, courseCode: $('#CourseCode').val() },
                success: function (data) {
                    if (data.isAvailable===false) {
                        // Exam name is available
                        $('#examNameValidation').text('');
                    } else {
                        // Exam name already exists
						$('#examNameValidation').text('Exam name already exists. Please choose another name.');


                    }
                },
                error: function () {
                    // Handle error
                    console.error('Error checking exam name availability.');
                }
            });
        }
    }
	</script>
	<script>
		$(document).ready(function () {
			// Attach event handler to Passing Marks input field
			$('#PassingMarks').on('blur', function () {
				validatePassingMarks();
			});
		});

		function validatePassingMarks() {
			// Validate Passing Marks against Total Marks
			var totalMarks = parseFloat($('#TotalMarks').val());
			var passingMarks = parseFloat($('#PassingMarks').val());

			var passingMarksField = $('#PassingMarks');

			if (!isNaN(totalMarks) && !isNaN(passingMarks) && passingMarks > totalMarks) {
				// Show a SweetAlert error message and highlight the field
				Swal.fire({
					title: 'Error',
					text: 'Passing Marks cannot be greater than Total Marks.',
					icon: 'error',
					confirmButtonText: 'OK'
				});
				passingMarksField.val(''); // Clear the Passing Marks field
				passingMarksField.addClass('error-field');
			} else {
				// Remove the error class if validation passes
				passingMarksField.removeClass('error-field');
			}

		}

function confirmSave(event) {
    console.log("Before validation");

    // Prevent default form submission
	event.preventDefault();
	debugger;
    // Validate fields before showing the confirmation dialog
    var courseCode = $('#CourseCode').val();
    var examName = $('#ExamName').val();
    var selectedDuration = $('#SelectedDuration').val();
    var totalMarks = parseFloat($('#TotalMarks').val());
    var passingMarks = parseFloat($('#PassingMarks').val());
    var totalNoOfQuestion = $('#TotalNoOfQuestion').val();
	var testPaperFile = $('#TestPaperFile').prop('files')[0];
	var technology = $('#technologyDropdown').val();

	// Check if any required field is empty
	if (!courseCode || !examName || !selectedDuration || !totalMarks || !passingMarks || !totalNoOfQuestion || !testPaperFile || !technology) {
        // If any required field is empty, show an error message
        Swal.fire({
            title: 'Error',
            text: 'All fields must be filled in.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return false; // Prevent further execution and form submission
    }

    // Check if TestPaperFile is null
    if (!testPaperFile) {
        // If TestPaperFile is null, show an error message
        Swal.fire({
            title: 'Error',
            text: 'Please select a test paper file.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return false; // Prevent further execution and form submission
    }

    // If all required fields are filled and Passing Marks is valid, proceed to show the confirmation dialog
    Swal.fire({
        title: 'Are you sure you want to add the exam?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, add it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            // User confirmed, submit the form with file data using FormData
            var formData = new FormData($('#examForm')[0]);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AddNewExamSNAsync", "Placement")',
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
					displayToast('Data saved successfully!', 'success');
					$('#examForm')[0].reset();
					$('#technologyDropdown').val(null).trigger('change');
					$('.custom-file-label').html('Choose File'); // Reset the file input label text	
					// Wait for the toast to be shown before redirecting
					setTimeout(function () {
						//window.location.href = '/Placement/ListAllInterviewAsyncSN'; // Replace '/home' with the URL you want to redirect to
					}, 2000); // Adjust the timeout value as needed
                },
                error: function (error) {
    // Handle error
    Swal.fire({
        title: 'Error',
        text: 'An error occurred while adding the exam.',
        icon: 'error',
        confirmButtonText: 'OK'
    }).then(() => {
        // Redirect to the AddNewExamSNAsync action
        window.location.href = '@Url.Action("AddNewExamSNAsync", "Placement")';
    });
}

            });
        }
    });

    return false; // Prevent default form submission
		}
		function cancelForm() {
			$('#examForm')[0].reset();
			$('#technologyDropdown').val(null).trigger('change');
			$('.custom-file-label').html('Choose File'); // Reset the file input label text	
		}
	</script>
	<script>
		function displayToast(message, type) {
			// Display Toastr notification
			toastr[type](message);
		}

		toastr.options = {
			closeButton: true,
			progressBar: true,
			positionClass: 'toast-top-right',
			showMethod: 'slideDown',
			timeOut: 4000 // How long the toast will be displayed (in milliseconds)
		};
	</script>

	<script>
		function limitIntegerLength(inputField, maxLength) {
			let inputValue = inputField.value;

			// Remove any non-digit characters
			inputValue = inputValue.replace(/\D/g, '');

			// Limit the input to the specified maxLength
			inputValue = inputValue.substring(0, maxLength);

			// Update the input field with the limited value
			inputField.value = inputValue;
		}
	</script>

	<script>
		$(document).ready(function () {


			$("#btnPreviewFile").on("click", function () {
				var documentInput = $("#TestPaperFile")[0];
				var documentFile = documentInput.files.length > 0 ? documentInput.files[0] : null;

				if (documentFile) {
					var reader = new FileReader();

					reader.onload = function (e) {
						var documentData = new Uint8Array(e.target.result);

						// Check the file type
						if (documentFile.type === 'application/pdf') {
							openPdfInNewTab(documentData);
						} else if (documentFile.type === 'application/msword' || documentFile.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
							openWordInNewTab(documentData);
						} else {
							alert('Unsupported document type. Unable to preview.');
						}
					};

					// Read the file as an ArrayBuffer
					reader.readAsArrayBuffer(documentFile);
				} else {
					alert('No document selected for preview.');
				}
			});

			function openPdfInNewTab(pdfData) {
				// Create a Blob from the PDF data
				var blob = new Blob([pdfData], { type: 'application/pdf' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the PDF
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}

			function openWordInNewTab(wordData) {
				// Create a Blob from the Word data
				var blob = new Blob([wordData], { type: 'application/msword' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the Word document
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}
		});
		function updateFileName(input) {
			var fileName = input.value.split('\\').pop();
			$(input).next('.custom-file-label').html(fileName);
		}
		$("#TestPaperFile").on("change", function () {
			// Validate file type
			var testPaperFile = this.files[0];
			var allowedFileTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];

			if (testPaperFile && allowedFileTypes.indexOf(testPaperFile.type) === -1) {
				// Invalid file type
				Swal.fire({
					title: 'Error',
					text: 'Invalid file type. Please select a PDF or Word document.',
					icon: 'error',
					confirmButtonText: 'OK'
				});

				// Clear the file input
				$(this).val('');
				// Update the file label to the default text
				$(this).next('.custom-file-label').html('Choose file');
				// Hide the "View" button
				$("#btnPreviewFile").hide();
			} else {
				// Valid file type
				// Update the file label to show the selected file name
				var fileName = $(this).val().split('\\').pop();
				$(this).next('.custom-file-label').html(fileName);
				// Show the "View" button
				$("#btnPreviewFile").show();
			}
		});
	</script>


</body>
</html>