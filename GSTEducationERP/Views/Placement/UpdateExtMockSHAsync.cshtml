
@model GSTEducationERPLibrary.Placement.Placement
@{
    ViewBag.Title = "ScheduleExternalMockSHAsync";
    //  Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <html>
    <head>
        <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>
        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <!-- Tempusdominus Bootstrap 4 -->
        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>

        <script type="text/javascript">
        $(document).ready(function () {
        var studentCode = '@Model.StudentCode'; // Assuming you're passing studentCode from the model

        // Call the function with the initial studentCode
        getStudentDetails(studentCode);

        // Function to fetch student details
        function getStudentDetails(studentCode) {
            $.ajax({
                url: "/Placement/GetStudentDetailsAsync",
                type: "GET",
                data: { studentCode: studentCode },
                success: function (data) {
                    // Clear existing table data
                    $("#studentDetailsBody").empty();

                    // Append new rows with student details
                    $.each(data, function (i, student) {
                        var row = "<tr>" +
                            "<td>" + student.CompanyName + "</td>" +
                            "<td>" + student.DesignationName + "</td>" +
                            "<td>" + student.Experience + "</td>" +
                            "</tr>";
                        $("#studentDetailsBody").append(row);
                    });
                },
                error: function (xhr, status, error) {
                    console.error(xhr.responseText);
                }
            });
            }
            $('#timepicker').datetimepicker({
                format: 'LT'
            });

            $('#reservationdate').datetimepicker({
                format: 'YYYY-MM-DD',
                minDate: moment().startOf('day')
            });

            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });
    });
        </script>
        <script>
            $(document).ready(function () {
                var saveButton = $('#saveButton');

                // Add a click event listener to the save button
                saveButton.click(async function (event) {
                    event.preventDefault(); // Prevent the default form submission
                    // Get form data
                    var mockId = $('#MockId').val();
                    var mockDate = $('#MockDate').val();
                    var interviewerName = $('#StaffCode').val();
                    var startTime = $('#StartTime').val();
                    var labName = $('#LabCode').val();
                    var status = $('#StatusId').val();
                    var duration = $('#SelectedDuration').val();

                    // Validate form data
                    if (mockDate.trim() === '' || interviewerName.trim() === '' || startTime.trim() === '' || labName.trim() === '' || status.trim() === '') {
                        Swal.fire('Error', 'Please fill in all fields.', 'error');
                        return;
                    }
                    // Show confirmation dialog
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You are about to schedule your mock.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, save it!'
                    }).then(async (result) => {
                        // If the user clicks "Yes, save it!" execute your save logic here
                        if (result.isConfirmed) {
                            // Prepare form data to send to the server
                            var formData = new FormData();
                            formData.append('MockId', mockId);
                            formData.append('MockDate', mockDate);
                            formData.append('StaffCode', interviewerName);
                            formData.append('StartTime', startTime);
                            formData.append('LabCode', labName)
                            formData.append('StatusId', status)
                            formData.append('SelectedDuration', duration);

                            try {
                                // Send form data to the server using Fetch API
                                var response = await fetch('/Placement/UpdateExtMockSHAsync', {
                                    method: 'POST',
                                    body: formData
                                });

                                 if (response.ok) {
                            // Success message
                            Swal.fire({
                                title: 'Update Successful',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '@Url.Action("ListAllMock", "Placement")';
                            });
                        } else {
                            // Handle error
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred while assigning the exam.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Handle unexpected error
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        });
    });
        </script>

    </head>
    <body>
        <div class="card-body">
            <h2>Edit Mock</h2>
            <hr>
            <div class="card col-md-12">
                <br />
                @Html.HiddenFor(model => model.MockId, new { id = "MockId" })

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Student Name</label>
                    <div class="col-md-6">
                        @Model.StudentName
                    </div>
                </div>

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Skill</label>
                    <div class="col-md-6">
                        @Model.SkillName
                    </div>
                </div>

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Mock Name</label>
                    <div class="col-md-6">
                        @Model.MockName
                    </div>
                </div>


                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Experience</label>
                    <div class="col-md-6">
                        <table id="studentDetailsTable" class="table-bordered">
                            <thead>
                                <tr>
                                    <th>Company</th>
                                    <th>Designation</th>
                                    <th>Experience</th>
                                </tr>
                            </thead>
                            <tbody id="studentDetailsBody">
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Mock Date</label>
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.MockDate, new { htmlAttributes = new { @class = "form-control col-md-12 datepicker", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required", id = "MockDate" } })

                        @Html.ValidationMessageFor(model => model.MockDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Mock Time</label>
                    <div class="col-md-6">
                        <div class="input-group date" id="timepicker" data-target-input="nearest">
                            <input type="text" name="StartTime" class="form-control col-md-12 datetimepicker-input" data-target="#timepicker" id="StartTime" value="@Model.StartTime.ToString("hh:mm tt")" />
                            <div class="input-group-append" data-target="#timepicker" data-toggle="datetimepicker">
                                <div class="input-group-text"><i class="far fa-clock"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="input-group">
                    <label class="control-label col-md-4" style="margin-left: 40px; ">Duration</label>
                    <div class="col-md-6">
                        <input type="time" id="SelectedDuration" name="SelectedDuration" value="@Model.SelectedDuration.ToString("hh\\:mm")" class="form-control col-md-12" />
                        @Html.ValidationMessageFor(model => model.SelectedDuration, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Lab Name</label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.LabCode, new SelectList(ViewBag.Lab, "Value", "Text"), "---Select Lab---", new { @class = "form-control col-md-12", id = "LabCode" })
                        @Html.ValidationMessageFor(model => model.LabCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Interviewer Name</label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.StaffCode, new SelectList(ViewBag.StaffList, "Value", "Text"), "---Select Interviewer---", new { @class = "form-control col-md=12", id = "StaffCode" })
                        @Html.ValidationMessageFor(model => model.StaffCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="control-label col-md-4" style="margin-left: 40px;">Status</label>
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.StatusList, "Value", "Text"), "---Select Status---", new { @class = "form-control col-md=12", id = "StatusId" })
                        @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="offset-md-5 col-md-12">
                        <input type="button" class="btn btn-success" value="Save" id="saveButton" style="margin-right:20px" />

                    </div>
                </div>
            </div>
        </div>
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ListAllMock")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </body>

</html>
}
