
@model GSTEducationERPLibrary.Placement.Placement
@{
    ViewBag.Title = "ScheduleExternalMockSHAsync";
    //  Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <html>
    <head>
        <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>
        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <!-- Tempusdominus Bootstrap 4 -->
        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>

        <style>
            .student-list {
                list-style-type: none; /* Remove default list marker */
                padding: 0; /* Remove default padding */
            }

                .student-list li {
                    padding-left: 10px; /* Add padding to simulate list marker */
                    position: relative; /* Set position relative for absolute positioning */
                }
        </style>

        <script type="text/javascript">
            $(document).ready(function () {

                // Initialize datetime picker outside of the change event
                $('#timepicker').datetimepicker({
                    format: 'LT'
                });

                $('#reservationdate').datetimepicker({
                    format: 'YYYY-MM-DD',
                    minDate: moment().startOf('day')
                });

                $('#reservationdatetime').datetimepicker({
                    icons: { time: 'far fa-clock' }
                });

                $("#CourseCode").change(function () {
                    var id = $(this).val();
                    $("#Batch").empty();
                    $.get("BatchBindSHAsync", { coursecode: id }, function (data) {
                        var v = "<option>---Select---</option>";
                        $.each(data, function (i, v1) {
                            v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                        });
                        $("#Batch").html(v);
                    });
                });


                $('#MockDate, #timepicker, #SelectedDuration').on('change input', function () {
                    debugger;
                    calculateEndTime();
                });


                // Function to calculate end time based on start time and duration
                function calculateEndTime() {
                    var startTime = $('#timepicker').val();
                    var duration = $('#SelectedDuration').val();

                    if (startTime && duration) {
                        var durationHours = parseInt(duration.split(':')[0]);
                        var durationMinutes = parseInt(duration.split(':')[1]);

                        var startTimeHours = parseInt(startTime.split(':')[0]);
                        var startTimeMinutes = parseInt(startTime.split(':')[1]);

                        var endTimeHours = startTimeHours + durationHours;
                        var endTimeMinutes = startTimeMinutes + durationMinutes;

                        if (endTimeMinutes >= 60) {
                            endTimeHours += 1;
                            endTimeMinutes -= 60;
                        }

                        var endTime = ('0' + endTimeHours).slice(-2) + ':' + ('0' + endTimeMinutes).slice(-2);

                        $('#endTime').val(endTime);
                        getLabDetails();
                    } else {
                        $('#endTime').val('');
                    }
                }

                // Function to get lab details based on selected parameters
                function getLabDetails() {
                    var mockDate = $('#MockDate').val();
                    var startTime = $('#timepicker').val();
                    var endTime = $('#endTime').val();
                    var batchCode = $('#BatchCode').val();

                    $.ajax({
                        url: '/Placement/ReadAvailableLabBatch_Bind',
                        method: 'POST',
                        data: {
                            batchCode: batchCode,
                            mockDate: mockDate,
                            startTime: startTime,
                            endTime: endTime
                        },
                        success: function (data) {
                            var result = JSON.parse(data);
                            var v = "<option>---Select---</option>";
                            $.each(result, function (i, item) {
                                v += "<option value='" + item.LabCode + "'>" + item.LabName + "</option>";
                            });
                            $("#LabCode").html(v);
                        }
                    });
                }
            });
        </script>
        <script>
    $(document).ready(function () {
        var saveButton = $('#saveButton');

        saveButton.click(async function (event) {
            event.preventDefault(); // Prevent the default form submission

            // Get form data
            var mockId = $('#MockId').val();
            var mockDate = $('#MockDate').val();
            var interviewerName = $('#StaffCode').val();
            var startTime = $('#timepicker').val();
            var labName = $('#LabCode').val();
            var status = $('#StatusId').val();
            var duration = $('#SelectedDuration').val();

            // Validate form data
            if (mockDate.trim() === '' || interviewerName.trim() === '' || startTime.trim() === '' || labName.trim() === '' || status.trim() === '') {
                Swal.fire('Error', 'Please fill in all fields.', 'error');
                return;
            }

            // Show confirmation dialog
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to schedule your mock.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, save it!',
                showCloseButton: true // Adding this line will display the "OK" button
            }).then(async (result) => {
                // If the user clicks "Yes, save it!" execute your save logic here
                if (result.isConfirmed) {
                    // Prepare form data to send to the server
                    var formData = new FormData();
                    formData.append('MockId', mockId);
                    formData.append('MockDate', mockDate);
                    formData.append('StaffCode', interviewerName);
                    formData.append('StartTime', startTime);
                    formData.append('LabCode', labName)
                    formData.append('StatusId', status)
                    formData.append('SelectedDuration', duration);

                    try {
                        // Send form data to the server using Fetch API
                        var response = await fetch('/Placement/UpdateIntMockSHAsync', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            // Success message
                            Swal.fire({
                                title: 'Update Successful',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '@Url.Action("ListAllMock", "Placement")';
                            });
                        } else {
                            // Handle error
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred while assigning the exam.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Handle unexpected error
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        });
    });
        </script>

    </head>
    <body>
        <div class="card-body">
            <h2>Edit Mock</h2>
            <hr />
            <div class="card pl-8 mx-auto col-md-11">
                <div class="card-body">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="container">
                        <div class="col-md-10" hidden>
                            <input type="text" name="EndTime" id="endTime" class="form-control" readonly />
                        </div>

                        <div class="form-group row" hidden>
                            @Html.LabelFor(model => model.MockId, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.MockId, new { @class = "form-control", style = "width:100%;" })
                                @Html.ValidationMessageFor(model => model.MockId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label style="margin-left: 0px;">Course:</label>
                                <span>@Model.CourseCode</span>
                            </div>
                            <div class="col-md-4">
                                <label style="margin-left: 10px;">Batch:</label>
                                <span>@Model.BatchName</span>
                            </div>
                            <div class="col-md-4">
                                <label style="margin-left: 10px;">Mock:</label>
                                <span>@Model.MockName</span>
                            </div>
                        </div>

                        <br />

                        @Html.HiddenFor(model => model.BatchCode)
                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px;">Student Name</label>
                            <div class="col-md-6">
                                <div class="card" style="overflow-y: auto; max-height: 200px;">
                                    <ul class="student-list">
                                        @foreach (var student in Model.StudentList)
                                        {
                                            <li>@Html.Raw(student)</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px; ">Mock Date</label>
                            <div class="col-md-6">

                                @Html.EditorFor(model => model.MockDate, new { htmlAttributes = new { @class = "form-control col-md-12 datepicker", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required", id = "MockDate" } })

                                @Html.ValidationMessageFor(model => model.MockDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px; ">Mock Time</label>
                            <div class="col-md-6">
                                <div class="input-group date" data-target-input="nearest">
                                    <input type="text" name="StartTime" id="timepicker" class="form-control datetimepicker-input" data-target="#timepicker" value="@Model.StartTime.ToString("hh:mm tt")" />
                                    <div class="input-group-append" data-target="#timepicker" data-toggle="datetimepicker">
                                        <div class="input-group-text"><i class="far fa-clock"></i></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="input-group">
                            <label class="control-label col-md-4" style="margin-left: 40px; ">Duration</label>
                            <div class="col-md-6">
                                <input type="time" id="SelectedDuration" name="SelectedDuration" value="@Model.SelectedDuration.ToString("hh\\:mm")" class="form-control col-md-12" />
                                @Html.ValidationMessageFor(model => model.SelectedDuration, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br>
                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px; ">Lab Name</label>
                            <div class="col-md-6">
                                @Html.DropDownListFor(model => model.LabCode, new SelectList(ViewBag.Lab, "Value", "Text"), "---Select Lab---", new { @class = "form-control col-md-12", id = "LabCode" })
                                @Html.ValidationMessageFor(model => model.LabCode, "", new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px;">Interviewer Name</label>
                            <div class="col-md-6">
                                @Html.DropDownListFor(model => model.StaffCode, new SelectList(ViewBag.StaffList, "Value", "Text"), "---Select Interviewer---", new { @class = "form-control col-md=12", id = "StaffCode" })
                                @Html.ValidationMessageFor(model => model.StaffCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="control-label col-md-4" style="margin-left: 40px;">Status</label>
                            <div class="col-md-6">
                                @Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.StatusList, "Value", "Text"), new { id = "StatusId", @class = "form-control col-md-12" })
                                @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="offset-md-5 col-md-12">
                                <input type="button" class="btn btn-success btn-sm" value="Save" id="saveButton" style="margin-right:20px" />

                            </div>
                        </div>

                        <br />
                    </div>
                </div>
            </div>
        </div>
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ListAllMock")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </body>
</html>
}

