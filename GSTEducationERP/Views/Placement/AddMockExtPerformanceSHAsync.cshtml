@model GSTEducationERPLibrary.Placement.Placement

@using (Html.BeginForm())
{
    <html>
    <head>
        <style>
            .rating-label {
                display: inline-block;
                width: 180px;
            }

            .rating-dropdown {
                width: 200px;
                display: inline-block;
            }

            .star-rating {
                display: inline-block;
                font-size: 30px;
                color: gold;
            }

            .golden-star {
                color: gold;
            }

            .custom-size {
                width: 70px;
                height: 25px;
            }
        </style>
        <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>
        <script>
            $(document).ready(function () {
                $("input[data-bootstrap-switch]").each(function () {
                    $(this).bootstrapSwitch('state', $(this).prop('checked'));
                });
                $('.rating-dropdown').val('');
                updateStarRating(0);

                var selectedDropdowns = 0;

                $(".rating-dropdown").change(function () {
                    if ($(this).val() !== "") {
                        selectedDropdowns++;
                    } else {
                        selectedDropdowns--;
                    }
                    updateStarRatingIfAllSelected();
                });

                function updateStarRatingIfAllSelected() {
                    if (selectedDropdowns === 4) {
                        calculateFinalPerformanceRating();
                    } else {
                        // If any dropdown is unselected, show all blank stars
                        updateStarRating(0);
                    }
                }

                function calculateFinalPerformanceRating() {
                    var communicationRating = parseInt($("#CommunicationRating").val()) || 0;
                    var technicalRating = parseInt($("#TechnicalRating").val()) || 0;
                    var confidenceRating = parseInt($("#ConfidenceRating").val()) || 0;
                    var projectKnowledgeRating = parseInt($("#ProjectKnowledgeRating").val()) || 0;

                    var totalScore = communicationRating + technicalRating + confidenceRating + projectKnowledgeRating;

                    // Update hidden field with the calculated total score
                    $("#TotalScore").val(totalScore);

                    // Update the star rating representation
                    updateStarRating(totalScore);

                }


                $("#my-checkbox").bootstrapSwitch();

                // Function to update AttendanceId based on checkbox state
                function updateAttendanceId() {
                    var attendanceValue = $("#my-checkbox").bootstrapSwitch('state') ? "30" : "31";
                    $("#AttendanceId").val(attendanceValue);
                }

                // Call the function initially to set the initial state
                updateAttendanceId();

                $("#my-checkbox").on('switchChange.bootstrapSwitch', function () {
                    // Reset all rating dropdowns when the attendance checkbox changes
                    $(".rating-dropdown").val("");
                    selectedDropdowns = 0; // Reset the selectedDropdowns count
                    updateStarRatingIfAllSelected(); // Update star rating accordingly

                    // Disable or enable rating dropdowns based on attendance status
                    $(".rating-dropdown").prop("disabled", !$(this).bootstrapSwitch('state'));

                });

                function updateStarRating(totalScore) {
                    // Clear the star rating container
                    $("#finalRatingContainer").empty();

                    // Calculate the percentage based on the total possible score (40 in this case)
                    var percentage = (totalScore / 40) * 100;

                    // Map the percentage to the number of stars (assuming 5 stars)
                    var stars = Math.ceil((percentage / 100) * 5);

                    // Ensure the number of stars is within the range of 0 to 5
                    stars = Math.min(Math.max(stars, 0), 5);

                    // Display the stars
                    for (var i = 1; i <= 5; i++) {
                        if (i <= stars) {
                            $("#finalRatingContainer").append("★"); // Full star
                        } else {
                            $("#finalRatingContainer").append("☆"); // Empty star
                        }
                    }
                }

            });
        </script>
        <script>



            // Add a click event listener to the save button
            $("#saveButton").click(function (event) {

                event.preventDefault(); // Prevent the default form submission
                // Get form data
                var mockName = $('#MockId').val();
                var studentCode = $('#StudentCode').val();
                var attendanceValue = $("#my-checkbox").bootstrapSwitch('state') ? "30" : "31";
                var communicationRating = parseInt($("#CommunicationRating").val());
                var technicalRating = parseInt($("#TechnicalRating").val());
                var confidenceRating = parseInt($("#ConfidenceRating").val());
                var projectKnowledgeRating = parseInt($("#ProjectKnowledgeRating").val());
                if (attendanceValue == "30") {
                    // Validate form data
                    if (mockName.trim() === '' || studentCode.trim() === '' || attendanceValue.trim() === '' || isNaN(communicationRating) || isNaN(technicalRating) || isNaN(confidenceRating) || isNaN(projectKnowledgeRating)) {
                        Swal.fire('Error', 'Please fill in all fields.', 'error');
                        return;
                    }
                }
                // Show confirmation dialog
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You are about to add performance.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, save it!'
                }).then(async (result) => {
                    // If the user clicks "Yes, save it!" execute your save logic here
                    if (result.isConfirmed) {
                        // Prepare form data to send to the server
                        var formData = new FormData();
                        formData.append('MockId', mockName);
                        formData.append('StudentCode', studentCode);
                        formData.append('AttendanceId', attendanceValue); // Adjusted to SelectedStudentCodes
                        formData.append('CommunicationRating', communicationRating);
                        formData.append('TechnicalRating', technicalRating);
                        formData.append('ConfidenceRating', confidenceRating);
                        formData.append('ProjectKnowledgeRating', projectKnowledgeRating);


                        try {
                            // Send form data to the server using Fetch API
                            var response = await fetch('/Placement/AddMockExtPerformanceSHAsync', {
                                method: 'POST',
                                body: formData
                            });

                            if (response.ok) {
                            // Success message
                            Swal.fire({
                                title: 'Save Successful',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '@Url.Action("ListAllMock", "Placement")';
                            });
                        } else {
                            // Handle error
                            Swal.fire({
                                title: 'Save Successful',
                                text: 'Performance Save Successful',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '@Url.Action("ListAllMock", "Placement")';
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Handle unexpected error
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        });

        </script>

    </head>

    <body>
        <div class="card-body">
            <h2>Add Mock Performance</h2>
            <hr>
            <div class="card pl-8 mx-auto col-md-11">
                <div class="card-body">
                    <label style="margin-left:5px">Student Name:</label>
                    @Model.StudentName

                    <div>
                        <label style="margin-left:5px">Skill:</label>
                        @Model.SkillName
                    </div>
                    <div class="row">
                        <label style="margin-left:11px">Mock Name:</label>
                        @Model.MockName
                        <!-- Adding space between the mock name and the date -->
                        <span style="margin-left: 30px;"></span>
                        <!-- Adjusted column size to fit in one line -->
                        <label style="margin-left:10px">Date:</label>
                        @Model.MDate
                    </div>


                    <div class="card">
                        <div class="card-body">
                            @Html.HiddenFor(model => model.MockId)
                            @Html.HiddenFor(model => model.StatusId)
                            @Html.HiddenFor(model => model.StudentCode)

                            <div class="input-group col-md-12">
                                @Html.LabelFor(model => model.Attendance, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    <input type="checkbox" id="my-checkbox" name="AttendanceId" checked data-bootstrap-switch data-off-color="danger" data-on-color="success" data-on-text="Present" data-off-text="Absent">

                                    @Html.HiddenFor(model => model.AttendanceId, new { id = "AttendanceId" })
                                </div>
                            </div>

                            <div class="form-group row">
                                @Html.LabelFor(model => model.CommunicationRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.CommunicationRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }).Concat(new[] { new SelectListItem { Text = "", Value = null } }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.CommunicationRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.TechnicalRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.TechnicalRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }).Concat(new[] { new SelectListItem { Text = "", Value = null } }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.TechnicalRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.ConfidenceRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.ConfidenceRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }).Concat(new[] { new SelectListItem { Text = "", Value = null } }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.ConfidenceRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.ProjectKnowledgeRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.ProjectKnowledgeRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }).Concat(new[] { new SelectListItem { Text = "", Value = null } }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.ProjectKnowledgeRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <label class="performance-label col-md-6">Performance:</label>
                            <div class="star-rating" id="finalRatingContainer"></div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <br />
                    <div class="offset-md-5 col-md-12">
                        <input type="button" class="btn btn-success" value="Save" id="saveButton" style="margin-right:20px" />

                    </div>
                </div>
            </div>
        </div>
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ListAllMock")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </body>
</html>
}