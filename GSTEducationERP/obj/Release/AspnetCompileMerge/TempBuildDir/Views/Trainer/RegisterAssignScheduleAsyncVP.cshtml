@model GSTEducationERPLibrary.Trainer.Trainer

@{
    ViewBag.Title = "RegisterAssignScheduleAsyncVP";
}
<html>
    <head>

<style>
        h2 {
            color: #64bbc9;
            font-weight: bold;
            font-size: 15px;
            margin-left: 17px;
            margin-bottom: -10px;
            font-family: sans-serif;
        }

        .back-button {
            font-size: 20px;
            margin-right: 180px;
            color: #007bff; /* Set the desired color */
            transition: color 0.3s ease; /* Add a smooth transition effect on hover */
            background: none;
            border: none;
            cursor: pointer;
            text-decoration: none;
            position: absolute;
            top: 100px;
            right: 40px;
        }

        /*.form-horizontal {
            margin: 20px;
            padding: 20px;
            width: 100%;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            font-weight: bold;
        }*/

        .btn-save {
            background-color: #28a745;
            color: #fff;
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
        }

        #endDateLabel {
            margin-top: 10px;
            font-weight: bold;
        }

        #fileLinks div {
            margin-bottom: 10px;
        }

        #pdfViewer {
            margin-top: 20px;
        }
</style>
</head>
    <body style="margin: 0; padding: 0;">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="input-group mb-3">
                <label class="control-label">Batch Name</label>
                <div class="col-md-8" style="margin-left: 12px;">
                    @Html.DropDownListFor(model => model.BatchId, (IEnumerable<SelectListItem>)ViewBag.AssingBatch, "--SELECT Batch--", new { @class = "form-control" })
                    @*@Html.EditorFor(model => model.BatchId, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group mb-3">
                <label class="control-label">Section Name</label>
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.SectionId, (IEnumerable<SelectListItem>)ViewBag.Section, "--SELECT Section--", new { @class = "form-control" })
                    @*@Html.EditorFor(model => model.SectionId, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.SectionId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group mb-3">
                <label class="control-label">Topic Name</label>
                <div class="col-md-8">
                    <select id="TopicId" name="TopicId" class="form-control" onchange="getTopicDetails()"> </select>
                    @Html.ValidationMessageFor(model => model.TopicId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">Sessions</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NoOfSessions, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.NoOfSessions, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label"> Start Date</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                <label>Date:</label>
                <div class="input-group date" id="StartDate" data-target-input="nearest">
                    <input type="text" name="StartDate" class="form-control datetimepicker-input" data-target="#StartDate">
                    <div class="input-group-append"  data-target="#StartDate" data-toggle="datetimepicker">
                        <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                    </div>
                </div>
            </div>*@
            <div class="form-group">
                <label class="control-label" id="endDateLabel"></label>
            </div>

            <div class="form-group">
                <label class="control-label">Assignment File</label>
                <div class="col-md-10">
                    <div id="fileLinks"></div>
                    @Html.ValidationMessageFor(model => model.AssignmentFile, "", new { @class = "text-danger" })
                </div>
            </div>
            <div id="pdfViewer"></div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-success btn-sm" />
                </div>
            </div>


        }
        <a class="back-button" onclick="goBack()">
            @*<video width="35" height="35" playsinline loop>
                <source src="~/Content/Admin/icon/back.mp4" type="video/mp4">
            </video>*@
        </a>
        @*<link href="~/Content/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />*@
        <script>
            /*state city bind*/
            $(document).ready(function () {
                $("#SectionId").change(function () {
                    var id = $(this).val();
                    $("#TopicId").empty();
                    $.get("/Trainer/SEctionTopic_Bind", { sectionid: id }, function (data) {
                        var v = "<option>---Select---</option>";
                        $.each(data, function (i, v1) {
                            v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                        });
                        $("#TopicId").html(v);
                    });
                });
            });
        </script>
        <script>
        function getTopicDetails() {
        var topicId = $("#TopicId").val();
    $.ajax({
        url: '@Url.Action("GetTopicDetails", "Trainer")',
        type: 'POST',
        data: { topicId: topicId },
        success: function (data) {
            var result = JSON.parse(data);

            // Clear previous file links/buttons
            $("#fileLinks").empty();

            // Split the file paths using comma as a delimiter
            var files = result[0]["AssignmentFile"].split(',');

            // Create links/buttons for each file
            for (var i = 0; i < files.length; i++) {
                var fileName = files[i].trim();
                var link = '<div><span>' + fileName + '</span><a  href="/Content/Trainer/docs/' + fileName + '" target="_blank" title="DELETE"> <i class="fa fa-paperclip"></i></a></div>';
                $("#fileLinks").append(link);
            }

            $("#NoOfSessions").val(result[0]["NoOfSessions"]);
            $("#Duration").val(result[0]["Duration"]);
        },
        error: function () {
            alert('Error fetching topic details');
        }
    });
}
        function openFile(filePath) {
         window.open(filePath, '_blank');
        }
        function goBack() {
        window.location.href = '@Url.Action("DetailsAssignScheduleAsyncVP", "Trainer")';
        }
        $('.back-button').mouseenter(function () {
            // Select the video element inside the link and play it
            $(this).find('video')[0].play();
            $(this).addClass('running');
        });
        $('.back-button').mouseleave(function () {
            // Select the video element inside the link and pause it
            var video = $(this).find('video')[0];
            video.pause();
            video.currentTime = 0; // Reset the video to the beginning
            $(this).removeClass('running');
        });
        </script>
        <script>
            $(document).ready(function () {
                var today = new Date();
                // Format the date as "yyyy-mm-dd"
                var formattedToday = today.toISOString().split('T')[0];

                $('#StartDate').attr('min', formattedToday);
            });
        </script>
        <script>
            $(document).ready(function () {
                // Function to update end date based on start date and duration
                function updateEndDate() {
                    var startDate = new Date($('#StartDate').val());
                    var durationString = $('#Duration').val();

                    var durationMatch = durationString.match(/(\d+)\s*days?\s*(\d+)\s*hours?\s*(\d+)\s*minutes?/);

                    var days = durationMatch ? parseInt(durationMatch[1]) : 0;
                    var hours = durationMatch ? parseInt(durationMatch[2]) : 0;
                    var minutes = durationMatch ? parseInt(durationMatch[3]) : 0;

                    if (!isNaN(startDate.getTime())) {
                        var endDate = new Date(startDate);

                        endDate.setDate(startDate.getDate() + days);
                        endDate.setHours(startDate.getHours() + hours);
                        endDate.setMinutes(startDate.getMinutes() + minutes);


                        var formattedEndDate = endDate.getFullYear() + '/' + ('0' + (endDate.getMonth() + 1)).slice(-2) + '/' + ('0' + endDate.getDate()).slice(-2);

                        // Display the formatted end date
                        $('#endDateLabel').text('End Date: ' + formattedEndDate);
                    }
                }

                updateEndDate();



                $('#StartDate, #TopicId').change(function () {
                    updateEndDate();
                });
            });
        </script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
        
        <script>
    $(document).ready(function () {
        // Handle form submission
        $('form').submit(function (event) {
            event.preventDefault();
            
            // Validate Batch Name
            var BatchId = $('#BatchId').val();
            if (BatchId == null || BatchId === "") {
                showErrorAlert('Please select a Batch.');
                return;
            }

            // Validate Topic Name
            var SectionId = $('#SectionId').val();
            if (SectionId == null || SectionId === "") {
                showErrorAlert('Please enter a Section Name.');
                return;
            }
            // Validate Topic Name
            var TopicId = $('#TopicId').val();
            if (TopicId == null || TopicId === "") {
                showErrorAlert('Please enter a Topic.');
                return;
            }

            // Validate Topic Name
            var StartDate = $('#StartDate').val();
            if (StartDate == null || StartDate === "") {
                showErrorAlert('Please enter a Start Date.');
                return;
            }
            // Serialize form data
            var formData = $(this).serialize();

            // Perform AJAX request
            $.ajax({
                type: 'POST',
                url: '@Url.Action("RegisterAssignScheduleAsyncVP", "Trainer")',
                data: formData,
                success: function (data) {
                    if (data.success) {
                        // Display success message and redirect
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: 'Schedule has been saved successfully!'
                        }).then(function () {
                            window.location.href = '@Url.Action("DetailsAssignScheduleAsyncVP", "Trainer")';
                        });
                    } else {
                        // Display error message
                        Swal.fire('Error', 'Unable to save the schedule.', 'error');
                    }
                },
                error: function () {
                    // Display error message
                    Swal.fire('Error', 'Unable to communicate with the server.', 'error');
                }
            });
        });
        function showErrorAlert(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: message,
            });
        }
    });
        </script>

    </body>
    </html>