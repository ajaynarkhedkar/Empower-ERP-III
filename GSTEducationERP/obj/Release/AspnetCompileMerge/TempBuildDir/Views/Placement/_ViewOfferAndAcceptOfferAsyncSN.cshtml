
@model GSTEducationERPLibrary.Placement.Placement
<html>
<head>
	<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
	<!-- Add SweetAlert script before your other scripts -->
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
	<!-- Bootstrap 4 -->
	<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
	<!-- Bootstrap Switch -->
	<script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
	<script src="~/Content/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
	<script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
	<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css">
	<script src="~/Content/plugins/toastr/toastr.min.js"></script>

</head>
<body>
	<div class="card">
		<br />
		@Html.HiddenFor(model => model.PlacementId)
		@Html.HiddenFor(model => model.CTC, new { id = "ctc" })
		@Html.HiddenFor(model => model.FilePth, new { id = "offerLetterFile" })
		@Html.HiddenFor(model => model.StudentName, new { id = "StudentName" })
		@Html.HiddenFor(model => model.CompanyName, new { id = "CompanyName" })
		<div class="col-md-10">
			@Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.StudentName
		</div>
		<div class="col-md-10">
			@Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.CompanyName
		</div>
		<div class="col-md-10">
			@Html.LabelFor(model => model.DesignationName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.DesignationName
		</div>
		<br />
		<div class="input-group col-md-10">
			@Html.LabelFor(model => model.JoiningDate, htmlAttributes: new { @class = "control-label col-md-5" })
			<div class="col-md-5">
				@Html.EditorFor(model => model.JoiningDate, new { htmlAttributes = new { @class = "form-control col-md-12 datepicker", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required" } })
			</div>
		</div>
		<br />
		<div class="input-group col-md-12" id="ctc-section">
			@Html.LabelFor(model => model.CTC_LPA, htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="col-md-6">
				<div class="input-group">
					@Html.TextBoxFor(model => model.CTC_LPA, new { @class = "form-control col-md-4", id = "CTCInput", type = "text", maxlength = "5" })
					<div class="input-group-append">
						<label class="input-group-text lpa" for="CTCInput">LPA</label>
					</div>
				</div>
				<span id="CTCValidation" class="text-danger"></span>
			</div>
		</div>
		<br />
		<div class="input-group col-md-12" id="offer-section">
			@Html.LabelFor(model => model.OfferLetter, htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="input-group col-md-6">
				<div class="custom-file ">
					<input type="file" class="custom-file-input" id="offerLetter" onchange="updateFileName(this)">
					<label class="custom-file-label" for="offerLetter">Choose file</label>
				</div>
			</div>
			<button type="button" class="btn btn-primary btn-sm" id="btnPreviewFile">View</button>
			<span style="margin-left:150px" id="offerValidation" class="text-danger"></span>
		</div>
		<br />
		<div class="input-group col-md-12">
			@Html.LabelFor(model => model.Description, "Comment", htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="col-md-6">
				@Html.TextAreaFor(model => model.Description, new { @class = "form-control col-md-12", rows = 2,maxlength=1000 }) <!-- Adjust 'rows' attribute as needed -->
				<span id="DescriptionValidation" class="text-danger"></span>
				@*@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })*@
			</div>
		</div>
		<br />
		<div class="row justify-content-center">
			<div class="col-md-4 text-center">
				<!-- Added text-center class for centering content -->
				<button type="button" class="btn btn-success btn-block" id="btnSave">Save</button>
			</div>
		</div>
		<br />

	</div>
	<script>
	$(document).ready(function () {
		updateFileNameLabel();
		$('#offerLetter').prop('disabled', true);
		$('#btnPreviewFile').click(function () {
			var offerLetterPath = '@Url.Content("~/Content/Placement/docs/OfferLetter/")' + $('#offerLetterFile').val();
			 var currentCTC_LPA = parseFloat($('#CTCInput').val());
        var existingCTC = parseFloat('@Model.CTC'); // Assuming you have the existing CTC value in the model

			if (currentCTC_LPA === existingCTC) {
				if (offerLetterPath.trim() !== '') {
					// Open the offer letter in a modal
					openOfferLetter(offerLetterPath);
					updateFileName(); // Fixed: Correct function call
				} else {
					// Display an error message if the offer letter path is empty
					toastr.error('Offer letter not available.');
				}
			}
		});

		function openOfferLetter(offerLetterPath) {
			// For a modal (using SweetAlert2):
			Swal.fire({
				title: 'Offer Letter Preview',
				html: '<iframe src="' + offerLetterPath + '" width="100%" height="600px"></iframe>',
				showCloseButton: true,
				showConfirmButton: false
			});
		}

		// Function to update the file name label
		function updateFileName(input) {
			var fileName = input.value.split('\\').pop();
			$(input).next('.custom-file-label').html(fileName);
		}


		// Function to update the file name label on page load
		function updateFileNameLabel() {
			var filePath = $('#offerLetterFile').val();
			if (filePath) {
				var fileName = filePath.split('\\').pop();
				$('.custom-file-label').html(fileName);
			}
		}
		$("#CTCInput").on("input", function () {
			var value = $(this).val();

			if (value.length > 5) {
				$(this).val(value.substr(0, 5));
			}

			var regex = /^\d+(\.\d{0,2})?$/;

			if (!regex.test(value)) {
				$("#CTCValidation").text("Please enter a valid CTC in the format 99.99.");
			} else {
				$("#CTCValidation").text("");
			}

		});
$('#CTCInput').focusout(function () {
        handleCTCChange();
    });

    $('#btnSave').click(function () {
        handleCTCChange();
    });

    function handleCTCChange() {
        var currentCTC_LPA = parseFloat($('#CTCInput').val());
        var existingCTC = parseFloat('@Model.CTC'); // Assuming you have the existing CTC value in the model

		if (currentCTC_LPA !== existingCTC) {
			Swal.fire({
				title: 'CTC Changed',
				text: 'The CTC value has changed. Do you want to add a new offer letter?',
				icon: 'question',
				showCancelButton: true,
				confirmButtonText: 'Yes, add new offer letter',
				cancelButtonText: 'No, continue without adding',
			}).then((result) => {
				if (result.isConfirmed) {
					focusOnOfferSection();
				}
			});
			$('#offerLetter').prop('disabled', false);
		}
		else {
			$('#offerLetter').prop('disabled', true);
		}
	
    }

    function focusOnOfferSection() {
        // Scroll to the top of the offer-section
        $('#offer-section').scrollTop(0);

        // Optionally, you can add additional styling or effects to highlight the offer-section
		$('#custom-file').css('border', '2px solid red');
		}

		$("#btnSave").on("click", function () {
			console.log("Save button clicked");
			var ctcValue = parseFloat($("#CTCInput").val());
			if (validateForm()) {
				Swal.fire({
					title: 'Are you sure?',
					text: 'Do you want to save this data?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, save it!',
					customClass: {
						container: 'small-sweetalert-container',
						title: 'small-sweetalert-title',
						content: 'small-sweetalert-content',
						confirmButton: 'small-sweetalert-confirm-button',
						cancelButton: 'small-sweetalert-cancel-button'
					}
				}).then((result) => {
					if (result.isConfirmed) {
						debugger;
						var currentCTC_LPA = parseFloat($('#CTCInput').val());
						var existingCTC = parseFloat('@Model.CTC'); // Assuming you have the existing CTC value in the model

						if (currentCTC_LPA !== existingCTC) {
							{
								var offerLetterInput = $("#offerLetter")[0];
								if (offerLetterInput.files.length > 0) {
									var offerLetter = offerLetterInput.files[0];
									// Prepare data to send to the server using FormData
									var formData = new FormData();
									formData.append("PlacementId", $("#PlacementId").val());
									formData.append("CTC_LPA", $("#CTCInput").val());
									formData.append("StudentName", $("#StudentName").val());
									formData.append("CompanyName", $("#CompanyName").val());
									formData.append("JoiningDate", $("#JoiningDate").val());
									formData.append("OfferLetter", offerLetter); // Append the file directly
									formData.append("Description", $("#Description").val());
								}
								else {
									
									console.error("No offer letter file selected.");
									return; // Stop further execution
								}
							}
						}
							else
							{
							var formData = new FormData();
							formData.append("PlacementId", $("#PlacementId").val());
							formData.append("CTC_LPA", $("#CTCInput").val());
							formData.append("StudentName", $("#StudentName").val());
							formData.append("CompanyName", $("#CompanyName").val());
							formData.append("JoiningDate", $("#JoiningDate").val());
							formData.append("FilePth", $("#offerLetterFile").val());
							formData.append("Description", $("#Description").val());
							}
						console.log("Preparing to make AJAX call...");

						// Make an AJAX call to the server to save the data
						$.ajax({
							type: "POST",
							url: "/Placement/ViewOfferAndAcceptOfferAsyncSN", // Replace with the actual controller and action
							data: formData,
							contentType: false, // Set content type to false for FormData
							processData: false, // Prevent jQuery from processing the data
							success: function (result) {
								// Handle the success response from the server
								console.log("Save successful");
								displayToast('Offer Accepted successfully!', 'success');

								// Wait for the toast to be shown before redirecting
								setTimeout(function () {
									$("#resultModal").modal("hide"); // Replace "myModal" with the actual ID of your modal
									window.location.href = '/Placement/ListAllInterviewAsyncSN'; // Replace '/home' with the URL you want to redirect to
								}, 2000); // Adjust the timeout value as needed
							},
							error: function (error) {
								// Handle the error response from the server
								console.error("Save failed", error);
								// You can show an error message or perform other actions as needed
							}
						});
					}
				});

			}
		});
		function validateForm() {
			var ctcValue = parseFloat($("#CTCInput").val());
			// Add validations for other fields as needed

			if (isNaN(ctcValue) || ctcValue <= 0) {
				$("#CTCValidation").text("Please enter a valid CTC in number format.");
				$("#CTCInput").focus();
				return false;
			}
			var offerLetterInput = $("#offerLetter")[0]; // Get the DOM element
			var offerLetter = offerLetterInput.files.length > 0 ? offerLetterInput.files[0] : null;

			var description = $("#Description").val();
			    var currentCTC_LPA = parseFloat($('#CTCInput').val());
        var existingCTC = parseFloat('@Model.CTC'); // Assuming you have the existing CTC value in the model

			if (currentCTC_LPA !== existingCTC) {
				if (!offerLetter) {
					$("#offerValidation").text("Please choose an offer letter.");
					$("#offerLetter").focus();
					return;

				}
			}

			if (!description) {
				$("#DescriptionValidation").text("Please provide a description.");
				$("#Description").focus();
				return;
			}
			// Add validations for other fields

			return true;
		}
	});
	</script>
	<script>
		function displayToast(message, type) {
			// Display Toastr notification
			toastr[type](message);
		}

		toastr.options = {
			closeButton: true,
			progressBar: true,
			positionClass: 'toast-top-right',
			showMethod: 'slideDown',
			timeOut: 4000 // How long the toast will be displayed (in milliseconds)
		};
	</script>
	<script>

			$("#btnPreviewFile").on("click", function () {
				var documentInput = $("#offerLetter")[0];
				var documentFile = documentInput.files.length > 0 ? documentInput.files[0] : null;
		 var currentCTC_LPA = parseFloat($('#CTCInput').val());
        var existingCTC = parseFloat('@Model.CTC'); // Assuming you have the existing CTC value in the model

				if (currentCTC_LPA !== existingCTC) {
					if (documentFile) {
						var reader = new FileReader();

						reader.onload = function (e) {
							var documentData = new Uint8Array(e.target.result);

							// Check the file type
							if (documentFile.type === 'application/pdf') {
								openPdfInNewTab(documentData);
							} else if (documentFile.type === 'application/msword' || documentFile.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
								openWordInNewTab(documentData);
							} else {
								alert('Unsupported document type. Unable to preview.');
							}
						};

						// Read the file as an ArrayBuffer
						reader.readAsArrayBuffer(documentFile);
					} else {
						alert('No document selected for preview.');
					}
				}
			});

			function openPdfInNewTab(pdfData) {
				// Create a Blob from the PDF data
				var blob = new Blob([pdfData], { type: 'application/pdf' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the PDF
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}

			function openWordInNewTab(wordData) {
				// Create a Blob from the Word data
				var blob = new Blob([wordData], { type: 'application/msword' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the Word document
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}

	</script>
</body>
</html>