@model GSTEducationERPLibrary.Placement.Placement

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
   
    <link href="~/Content/plugins/sweetalert2-theme-bootstrap-4/bootstrap-4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/dist/css/adminlte.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/bootstrap/js/bootstrap.min.css" rel="stylesheet" />

    <style>
        .addlogo {
            width: 65%;
            aspect-ratio: 3/2;
            object-fit: contain;
           
        }

        h2 {
            padding-top: 10px;
            margin-bottom: 8px;
            font-family: Verdana;
            font-weight: bold;
            font-size: medium;
            color: #33CCCC;
        }

        .card-primary.card-outline-tabs > .card-header a.active {
            border-top: 3px solid #33CCCC;
        }

        a {
            color: #33CCCC;
        }

        .card.card-outline-tabs .card-header a:hover {
            color: #33CCCC;
        }

        .card-primary.card-outline-tabs > .card-header a.active, .card-primary.card-outline-tabs > .card-header a.active:hover {
            border-top: 3px solid #33CCCC;
        }

        .card-body {
            font-family: Calibri !important;
            padding-bottom: 0px !important;
        }

        .btn-group > .btn:not(:last-child):not(.dropdown-toggle), .btn-group > .btn-group:not(:last-child) > .btn {
            padding-left: 5px !important;
            padding-right: 5px !important;
        }

        .flex {
            display: flex;
            font: 15px !important;
        }

        #CompanyDescription {
            height: 100px !important;
            width: 300px;
        }
    </style>
</head>
<body>
    @using (Html.BeginForm("UpdatCompanyAsyncPB", "Placement", new { @id = "form", @enctype = "multipart/form-data" }))
    {
        <br />
        <div class="card" style="width:650px;">
            <div class="row" style="padding-top: 12px;">
                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.CompanyName, "Company", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control onlycharactors col-md-7", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.InduastryId, "Industry", htmlAttributes: new { @class = "control-label col-md-4" })
                    <select class="form-control select2 col-md-7" name="InduastryId" id="InduastryId">
                        <option value="" disabled selected>--Select Country</option>
                        @foreach (System.Data.DataRow data in ViewBag.Induastry.Tables[0].Rows)
                        {
                            var Selected = "";
                            if (ViewBag.Update.Tables[0].Rows[0]["IndustryId"].ToString() == data["InduastryId"].ToString())
                            {
                                Selected = "selected";
                            }
                            <option value="@data["InduastryId"]" @Selected>@data["InduastryName"]</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.CompanyEmail, "Company Email", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.CompanyEmail, new { htmlAttributes = new { @class = "form-control col-md-7", @required = "required", @onchange = "checkEmail('CompanyEmail')", @maxlength = "240" } })
                    @Html.ValidationMessageFor(model => model.CompanyEmail, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex" style="overflow-y: auto;">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-4" })
                    <textarea id="Address" name="Address" class="form-control col-md-7" required>@ViewBag.Update.Tables[0].Rows[0]["Address"]</textarea>

                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.CountryId, "Country Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.DropDownListFor(model => model.CountryId, new SelectList(ViewBag.Country, "Value", "Text"), new
                                                {
                                                    @class = "form-control col-md-7",
                                                    @required = "required"})
                    @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.StateId, "State Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.DropDownListFor(model => model.StateId, new SelectList(ViewBag.State, "Value", "Text"), new
                    {
                        id = "StateName",
                        @class = "form-control col-md-7",
                        @required = "required"})
                    @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.DropDownListFor(model => model.City, new SelectList(ViewBag.City, "Value", "Text"), new { id = "City", @class = "form-control col-md-7", @required = "required" })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR1Name, "HR1 Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR1Name, new { htmlAttributes = new { @class = "form-control onlycharactors col-md-7", @required = "required" } })
                    @Html.ValidationMessageFor(model => model.HR1Name, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR1Mail, "HR1 Mail", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR1Mail, new { htmlAttributes = new { @class = "form-control col-md-7", @required = "required", @onchange = "checkEmail('HR1Mail')", @maxlength = "240" } })
                    @Html.ValidationMessageFor(model => model.HR1Mail, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR1Contact, "HR1 Contact", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR1Contact, new { htmlAttributes = new { @class = "form-control onlynumber col-md-7", @required = "required", @data_val_length_min = "10", @maxlength = "10" } })
                    @Html.ValidationMessageFor(model => model.HR1Contact, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR2Name, "HR2 Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR2Name, new { htmlAttributes = new { @class = "form-control onlycharactors col-md-7" } })
                    @Html.ValidationMessageFor(model => model.HR2Name, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR2Mail, "HR2 Mail", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR2Mail, new { htmlAttributes = new { @class = "form-control col-md-7", @onchange = "checkEmail('HR2Mail')", @maxlength = "240" } })
                    @Html.ValidationMessageFor(model => model.HR2Mail, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR2Contact, "HR2 Contact", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR2Contact, new { htmlAttributes = new { @class = "form-control onlynumber col-md-7", @data_val_length_min = "10", @maxlength = "10" } })
                    @Html.ValidationMessageFor(model => model.HR2Contact, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR3Name, "HR3 Name", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR3Name, new { htmlAttributes = new { @class = "form-control onlycharactors col-md-7" } })
                    @Html.ValidationMessageFor(model => model.HR3Name, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR3Mail, "HR3 Mail", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR3Mail, new { htmlAttributes = new { @class = "form-control col-md-7", @onchange = "checkEmail('HR3Mail')", @maxlength = "240" } })
                    @Html.ValidationMessageFor(model => model.HR3Mail, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex">
                    @Html.LabelFor(model => model.HR3Contact, "HR3 Contact", htmlAttributes: new { @class = "control-label col-md-4" })
                    @Html.EditorFor(model => model.HR3Contact, new { htmlAttributes = new { @class = "form-control onlynumber col-md-7", @data_val_length_min = "10", @maxlength = "10" } })
                    @Html.ValidationMessageFor(model => model.HR3Contact, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6 form-group flex" hidden>
                    @Html.LabelFor(model => model.CompanyCode, htmlAttributes: new { @class = "control-label col-md-6" })
                    @Html.EditorFor(model => model.CompanyCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CompanyCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group flex">
                @Html.LabelFor(model => model.CompanyDescription, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
                <textarea class="form-control onlynumberchar col-md-8" id="CompanyDescription" name="CompanyDescription" required>@Model.CompanyDescription</textarea>
                @Html.ValidationMessageFor(model => model.CompanyDescription, "", new { @class = "text-danger" })
            </div>
            <div class="text-center pt-3">

                <button type="button" name="submit" id="submit" class="btn btn-sm btn-success">Save</button>

            </div>

            <div class="text-left">
                <a href="/Placement/ListAllCompanyAsyncPB" class="icon text-left">
                    <video width="30" height="30" playsinline loop>
                        <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4">
                    </video>
                </a>
            </div>
        </div>

    }

    <script src="~/Content/plugins/sweetalert2/sweetalert2.min.js" type="text/javascript"></script>

    <script src="~/Content/Admin/js/adminlte.min.js" type="text/javascript"></script>

    <script src="~/Content/plugins/moment/moment.min.js"></script>

    <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>

    <script src="~/Content/Admin/js/Icon.js"></script>

    <script type="text/javascript">

        $('#CountryName').on('change', function (e) {
            var Country = $('#CountryName').val();

            $.ajax({
                url: "/Placement/GetState",
                type: 'Post',
                data: {
                    CountryId: Country
                },
                success: function (response) {

                    var v = "<option>---Select State---</option>";
                    var result = JSON.parse(response);
                    for (var i = 0; i < result.length; i++) {

                        v += "<option value=" + result[i]["StateId"] + ">" + result[i]["StateName"] + "<option>";
                    }
                    $("#StateName").html(v);
                },
            });
        });

        $('#StateName').on('change', function (e) {
            var state = $('#StateName').val();

            $.ajax({
                url: "/Placement/GetCity",
                type: 'Post',
                data: {
                    StateId: state
                },
                success: function (response) {

                    var v = "<option>---Select City---</option>";
                    var result = JSON.parse(response);
                    for (var i = 0; i < result.length; i++) {

                        v += "<option value=" + result[i]["CityId"] + ">" + result[i]["CityName"] + "<option>";
                    }
                    $("#City").html(v);
                },
            });
        });

        $('#reservationdate').datetimepicker({
            format: 'YYYY-MM-DD',

        });

        $('#submit').click(function (e) {
            e.preventDefault();

            var form = $(this).closest('form');
            var CompanyName = $('#CompanyName').val();
            if (CompanyName == null || CompanyName === "") {
                showErrorAlert('Please Enter Company Name.');
                return;
            }
            var Email = $('#CompanyEmail').val();
            if (Email == null || Email === "") {
                showErrorAlert('Please Enter company email.');
                return;
            }
            var Address = $('#Address').val();
            if (Address == null || Address === "") {
                showErrorAlert('Please Enter Company Address.');
                return;
            }
            var Country = $('#CountryId').val();
            if (Country == null || Country === "") {
                showErrorAlert('Please Select Country.');
                return;
            } var HR1 = $('#HR1Name').val();
            if (HR1 == null || HR1 === "") {
                showErrorAlert('Please Enter HR1 name.');
                return;
            } var HR1Email = $('#HR1Mail').val();
            if (HR1Email == null || HR1Email === "") {
                showErrorAlert('Please Enter HR1 email.');
                return;
            } var HR1Contact = $('#HR1Contact').val();
            if (Email == null || Email === "") {
                showErrorAlert('Please Enter HR1 Contact Number.');
                return;
            } var Description = $('#CompanyDescription').val();
            if (Description == null || Description === "") {
                showErrorAlert('Please Enter Company Description Number.');
                return;
            }
            Swal.fire({
                title: "Do you want to save the changes?",
                showCancelButton: true,
                confirmButtonText: "Save",
               
               }).then((result) => {
                if (result.isConfirmed) {

                    var formData = new FormData(form[0]);

                    $.ajax({
                        type: 'POST',
                        url: form.attr('action'),
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            if (data.success) {
                                /*showSuccessMessage();*/
                                Swal.fire("Saved!", "Your changes have been saved.", "success").then(function () {
                                    window.location.href = '@Url.Action("ListAllCompanyAsyncPB", "Placement")';

                                 });
                            } else {
                                Swal.fire('Error', 'Unable to save the company.', 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Error', 'Unable to communicate with the server.', 'error');
                        }
                    });
                } else if (result.isDenied) {
                    // Handle case where changes are not saved
                    Swal.fire("Changes are not saved", "", "info");
                }

            });
        });

        function showErrorAlert(message) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: message,
            });
        }

        $(".onlynumber").keyup(function (e) {
            if (/\D/g.test(this.value)) {
                // Filter non-digits from input value.
                this.value = this.value.replace(/\D/g, '');
            }
        });

        $(".onlycharactors").keypress(function (e) {
            var key = e.keyCode;
            if (key >= 48 && key <= 57) {

                e.preventDefault();
                //or
                return false;
            }
        });

        $('.back-button').mouseenter(function () {
            // Select the video element inside the link and play it
            $(this).find('video')[0].play();
            $(this).addClass('running');
        });

        $('.back-button').mouseleave(function () {
            var video = $(this).find('video')[0];
            video.pause();
            video.currentTime = 0; // Reset the video to the beginning
            $(this).removeClass('running');
        });
    function isValidEmail(email) {
        var emailRegex = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
    }

    function checkEmail(inputId) {
        var emailInput = document.getElementById(inputId);
        var email = emailInput.value;

        if (isValidEmail(email)) {
            // Valid email, you can perform additional actions here if needed
        } else {
            $("#" + inputId).val("");
            Swal.fire({
                title: "<span style='font-size: smaller;'>Please enter a valid email address.</span>",
                showConfirmButton: true,

            });
        }
    }
    </script>
</body>
</html>

