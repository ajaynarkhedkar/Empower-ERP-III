@model GSTEducationERPLibrary.Coordinator.Coordinator

@{
    ViewBag.Title = "RegisterNewLabAsyncVJ";
    //Layout = "~/Views/Shared/_LayoutCoordinator.cshtml";
}
<html>
<head>
    @*<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>*@
    <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

    <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
    <script src="~/Content/plugins/toastr/toastr.min.js"></script>

    <!-- Bootstrap 4 -->

    <script src="~/Content/plugins/moment/moment.min.js"></script>
    <!-- Tempusdominus Bootstrap 4 -->
    <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
    <script>
        $(document).ready(function () {
            // Attach a click event handler to the Close button
            $('#closeButton').click(function () {
                // Redirect to the previous page
                window.history.back();
            });

            // Add a click event listener to the save button
            $('#saveButton').click(function (event) {
                event.preventDefault(); // Prevent the default form submission

                debugger;
                var branchCode = $('#BranchCode').val();
                var labName = $('#LabName').val();
                var labCapacity = $('#LabCapacity').val();
                var availableSystem = $('#AvailableSystem').val();
                var labCreatedDate = $('#labCreatedDate').val();

                // Validate form data
                if (branchCode === '' || labName === '' || labCapacity === '' || availableSystem === '' || labCreatedDate === '') {
                    // Display SweetAlert error message
                    Swal.fire({
                        title: 'Error',
                        text: 'Please fill all fields.',
                        icon: 'error'
                    });
                    return;
                }
                //// Validate Lab Name
                //if (!validateLabName(labName)) {
                //    // Display error message if validation fails
                //    Swal.fire({
                //        title: 'Error',
                //        text: 'Please enter a valid Lab Name with the first letter capitalized.',
                //        icon: 'error'
                //    });
                //    return;
                //}
                // Show confirmation dialog
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You are about to create a New Lab.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, save it!'
                }).then(async (result) => {
                    // If the user clicks "Yes, save it!" execute your save logic here
                    if (result.isConfirmed) {
                        // Prepare form data to send to the server
                        debugger;
                        var formData = {
                            BranchCode: branchCode,
                            LabName: labName,
                            LabCapacity: labCapacity,
                            AvailableSystem: availableSystem,
                            LabCreatedDate: labCreatedDate
                        };

                        try {
                            // Send form data to the server using AJAX
                            var response = await $.ajax({
                                url: '/Coordinator/RegisterNewLabAsyncVJ',
                                type: 'POST',
                                data: formData,
                                success: function (data) {
                                    // Display success toast
                                    displayToast('Data Saved Successfully.', 'success');

                                    // Redirect to the list page after a slight delay
                                    setTimeout(function () {
                                        window.location.href = '/Coordinator/DetailsLabManagementAsyncVJ';
                                    }, 1000); // Redirect after 1 second
                                },
                                error: function (xhr, status, error) {
                                    console.error('Error:', error);
                                    // Display error toast
                                    displayToast('Error saving followup data. Please try again.', 'error');
                                }
                            });
                        } catch (error) {
                            console.error('Error:', error);
                            // Display error toast
                            displayToast('An unexpected error occurred. Please try again later.', 'error');
                        }
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        // Handle if the user clicked the cancel button
                        Swal.fire('Cancelled', 'Your action has been cancelled.', 'info');
                    }
                });
            });

            function displayToast(message, type) {
                // Display Toastr notification
                toastr[type](message);
            }

            toastr.options = {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                showMethod: 'slideDown',
                timeOut: 40000 // How long the toast will be displayed (in milliseconds)
            };
        });
    </script>


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>AdminLTE 3 | DataTables</title>
    <link rel="stylesheet" href="~/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/Content/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">

    <style>
        h2 {
            color: #64bbc9;
            font-weight: bold;
            font-size: 30px;
            margin-left: 17px;
            margin-bottom: -10px;
            font-family: sans-serif;
        }

        .dataTables_wrapper .btn-secondary {
            color: #235;
            background-color: transparent !important;
            border-color: transparent;
            font-size: x-large;
        }

        .card-primary.card-outline-tabs > .card-header a.active {
            border-top: 3px solid #01a6a6;
        }

        a {
            color: #01a6a6;
        }

        .card.card-outline-tabs .card-header a:hover {
            color: #01a6a6;
        }

        .card-primary.card-outline-tabs > .card-header a.active, .card-primary.card-outline-tabs > .card-header a.active:hover {
            border-top: 3px solid #01a6a6;
        }

        .card-body {
            font-family: Calibri !important;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        th {
            background-color: #64bbc9;
            color: #000;
            text-align: center !important;
        }

        td {
            text-align: center;
            color: black !important;
        }

        .table td {
            padding: 0px 0px 0px 0px !important;
            font-size: 14px !important;
        }

        .table th {
            padding: 5px 5px 4px 10px !important;
            font-size: 14px !important;
        }

        .dataTables_filter {
            margin-top: -50px;
        }

        #example1_filter label {
            margin-right: 60px !important;
        }

        #example1_wrapper {
            margin-top: -42px !important;
        }
    </style>



</head>
<body>
    <div class="card">
        @*<h2>Add New Lab</h2>*@

        @using (Html.BeginForm("RegisterNewLabAsyncVJ", "Coordinator", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <br />
            <div class="form-horizontal ">
                @*<h4>Coordinator</h4>*@
                <div class="input-group">
                    @*@Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label style="margin-left:370px;"> Branch Name</label>
                    <div class="col-md-2.2">
                        <select id="BranchCode" class="form-control" style="margin-left:30px;" >
                            <option value="" disabled selected>---Select Branch Name---</option>
                            @foreach (var item in (IEnumerable<SelectListItem>)ViewBag.CenterName)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.BranchCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />
                @*<div class="col-md-6 form-group">
                        <label class="col-md-5">Country :</label>
                        <select class="form-control select2 col-md-7" id="Country" name="Country" required>
                            <option value="" disabled selected>---Select Country---</option>
                            @foreach (System.Data.DataRow Data in ViewBag.Country.Tables[0].Rows)
                            {
                <option value="@Data["CountryId"]">@Data["CountryName"]</option>}
                        </select>
                    </div>*@

                @*<div class="form-group">
                    @Html.LabelFor(model => model.LabCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LabCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.LabCode, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="input-group">
                    @*@Html.LabelFor(model => model.LabName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label style="margin-left:370px;"> Lab Name</label>
                    <div class="col-md-2" style="margin-left: 45px;">
                        @Html.EditorFor(model => model.LabName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LabName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <br />

                <div class="input-group">
                    @*@Html.LabelFor(model => model.LabCapacity, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label style="margin-left:370px;"> Lab Capacity</label>
                    <div class="col-md-2" style="margin-left: 30px;">
                        @Html.EditorFor(model => model.LabCapacity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LabCapacity, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="input-group">
                    @*@Html.LabelFor(model => model.AvailableSystem, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label style="margin-left:370px;"> Available System</label>
                    <div class="col-md-2" style="margin-left: 3px;">
                        @Html.EditorFor(model => model.AvailableSystem, new { htmlAttributes = new { @class = "form-control", @id = "AvailableSystem" } })
                        @Html.ValidationMessageFor(model => model.AvailableSystem, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="input-group">
                    @*@Html.LabelFor(model => model.LabCreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label style="margin-left:370px;">Lab Created Date</label>
                    <div class="col-md-2" style="margin-left: 3px;">
                        @Html.TextBoxFor(model => model.LabCreatedDate, "{0:dd-MM-yyyy}", new { @class = "form-control", @readonly = "readonly", id = "labCreatedDate" })
                        @Html.ValidationMessageFor(model => model.LabCreatedDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="input-group" style="margin-left:450px;">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" formaction="AddNewLab" class="btn btn-success btn-sm" id="saveButton" />
                        @*<input type="button" class="btn btn-success btn-sm" value="Save" id="saveButton" style="margin-right:20px"   />*@
                        @*<input type="button" value="Close" class="btn btn-danger btn-sm" id="closeButton" />*@
                        <form action="DetailsLabManagementAsyncVJ">
                            <input type="submit" value="Close" class="btn btn-danger btn-sm" />
                        </form>
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Back to List", "DetailsLabManagementAsyncVJ")
        </div>

        <script src="~/Content/plugins/jquery/jquery.min.js"></script>
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                var today = new Date();
                //document.getElementById("AvailableSystem").value = ""; // Set value to empty string

                var formattedDate = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();
                document.getElementById("labCreatedDate").value = formattedDate;
            });
        </script>

        <script>
            $(document).ready(function () {
                $('#AvailableSystem').val('');
                $('#LabCapacity').val('');

                $('#saveButton').click(function (event) {
                    event.preventDefault(); // Prevent the default form submission

                    // Validate Lab Name
                    //var labName = $('#LabName').val();
                    //if (!validateLabName(labName)) {
                    //    // Display error message if validation fails
                    //    Swal.fire({
                    //        title: 'Error',
                    //        text: 'Please enter a valid Lab Name with the first letter capitalized.',
                    //        icon: 'error'
                    //    });
                    //    return;
                    //}

                    // If validation passes, proceed with form submission
                    // Your form submission logic goes here
                });

                function validateLabName(name) {
                    // Regular expression to match only text with the first letter capitalized
                    var regex = /^[A-Z][a-zA-Z\s]*$/;
                    return regex.test(name);
                }
            });
        </script>
        <script>
            $(document).ready(function () {
                $('#LabName').on('input', function () {
                    var text = $(this).val();
                    // Remove numbers
                    var newText = text.replace(/[0-9]/g, '');
                    // Capitalize first letter
                    newText = newText.charAt(0).toUpperCase() + newText.slice(1);
                    $(this).val(newText);
                });
            });
        </script>
        <script>
            $(document).ready(function () {
                $('#LabCapacity').on('input', function () {
                    var inputValue = $(this).val();
                    // Remove any non-numeric characters
                    var numericValue = inputValue.replace(/[^0-9]/g, '');
                    // Ensure maximum length of 200 characters
                    if (numericValue.length > 200) {
                        numericValue = numericValue.substring(0, 200);
                    }
                    // Ensure only two-digit numbers
                    var twoDigitValue = numericValue.replace(/(\d{3,})/g, '');
                    $(this).val(twoDigitValue);
                });
            });
        </script>
        @*<script>
            $(document).ready(function () {
                $('#AvailableSystem').on('input', function () {
                    var inputValue = $(this).val();
                    // Remove any non-numeric characters
                    var numericValue = inputValue.replace(/[^0-9]/g, '');
                    // Ensure maximum length of 30 characters
                    if (numericValue.length > 30) {
                        numericValue = numericValue.substring(0, 30);
                    }
                    // Ensure only two-digit numbers
                    var twoDigitValue = numericValue.replace(/(\d{3,})/g, '');
                    $(this).val(twoDigitValue);
                });
            });
        </script>*@
        <script>
            $(document).ready(function () {
                $('#LabCapacity, #AvailableSystem').on('input', function () {
                    var labCapacityValue = parseInt($('#LabCapacity').val().replace(/[^0-9]/g, '')) || 0;
                    var availableSystemValue = parseInt($('#AvailableSystem').val().replace(/[^0-9]/g, '')) || 0;

                    // Ensure AvailableSystem is not more than LabCapacity
                    if (availableSystemValue > labCapacityValue) {
                        availableSystemValue = labCapacityValue;
                        $('#AvailableSystem').val(availableSystemValue);
                    }

                    // Ensure maximum length of 0 characters
                    if ($('#AvailableSystem').val().length > 200) {
                        $('#AvailableSystem').val($('#AvailableSystem').val().substring(0, 200));
                    }
                });
            });
        </script>




        <script>
		$(document).ready(function () {
            // Attach event handler to ExamName input field on keyup
            $('#LabName').on('keyup', function () {
                validateLabName();
            });
		});

		function validateBatchNameOnCourseChange() {
            var LabName = $('#LabName').val();
            if (LabName) {
                $('#LabName').val('');
                $('#LabNameValidation').text(''); // Clear the validation message
			}
		}

            function validateLabName() {
                var LabName = $('#LabName').val();
                if (LabName) {
            $('#LabNameValidation').text('Please select a course before entering the Batch name.');
            $('#LabNameValidation').text('');
        }

                if (LabName) {
            // Perform AJAX check to see if the Batch name already exists
            $.ajax({
                url: '@Url.Action("IsLabAvilableAsyncVJ", "Coordinator")',
                type: 'POST',
                data: { LabName: LabName},
                success: function (data) {
                    if (data.isAvailable===false) {
                        // Batch name is available
                        $('#LabNameValidation').text('');
                    } else {
                        // Batch name already exists
                        $('#LabNameValidation').text('Batch name already exists. Please choose another name.');


                    }
                },
                error: function () {
                    // Handle error
                    console.error('Error checking Batch name availability.');
                }
            });
        }
    }
        </script>




    </div>
</body>
</html>