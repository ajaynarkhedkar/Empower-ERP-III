@model GSTEducationERPLibrary.Placement.Placement
<html>
<head>
	<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
	<!-- Add SweetAlert script before your other scripts -->
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
	<!-- Bootstrap 4 -->
	<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
	<!-- Bootstrap Switch -->
	<script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
	<script src="~/Content/plugins/bs-custom-file-input/bs-custom-file-input.min.js"></script>
	<script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
	<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css">
	<script src="~/Content/plugins/toastr/toastr.min.js"></script>

</head>
<body>
	<div class="card">
		<br />
		@Html.HiddenFor(model => model.PlacementId)
		@Html.HiddenFor(model => model.StudentName, new { id = "StudentName" })
		@Html.HiddenFor(model => model.CompanyName, new { id = "CompanyName" })
		<div class="col-md-10">
			@Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.StudentName
		</div>
		<div class="col-md-10">
			@Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.CompanyName
		</div>
		<div class="col-md-10">
			@Html.LabelFor(model => model.DesignationName, htmlAttributes: new { @class = "control-label col-md-5" })
			@Model.DesignationName
		</div>
		<div class="input-group col-md-12">
			@*@Html.LabelFor(model => model.StatusId, "Feedback Status", htmlAttributes: new { @class = "control-label col-md-5" })
				<div class="col-md-6">
					@Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.InterviewStatus, "Value", "Text"), "Select Status", new { @class = "form-control col-md-10" })
					@Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
				</div>*@
		</div>
		<br />
		<div class="input-group col-md-12">
			@Html.LabelFor(model => model.FeedbackStatus, "Feedback", htmlAttributes: new { @class = "control-label col-md-4" })

			<div class="col-md-6">
				<input type="checkbox" id="my-checkbox" name="my-checkbox" checked data-bootstrap-switch data-off-color="danger" data-on-color="success" data-on-text="Add" data-off-text="Refuse">
				@Html.HiddenFor(model => model.FeedbackStatus, new { id = "FeedbackStatus" })

			</div>
		</div>
		<br />
		<div class="input-group col-md-12" id="ctc-section">
			@Html.LabelFor(model => model.CTC_LPA, htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="col-md-6">
				<div class="input-group">
					@Html.TextBoxFor(model => model.CTC_LPA, new { @class = "form-control col-md-4", id = "CTCInput", type = "text", maxlength = "5" })
					<div class="input-group-append">
						<label class="input-group-text lpa" for="CTCInput">LPA</label>
					</div>
				</div>
				<span id="CTCValidation" class="text-danger"></span>
			</div>
		</div>

		<br />

		<div class="input-group col-md-12" id="offer-section">
			@Html.LabelFor(model => model.OfferLetter, htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="input-group col-md-6">
				<div class="custom-file ">
					<input type="file" class="custom-file-input" id="offerLetter" onchange="updateFileName(this)">
					<label class="custom-file-label" for="offerLetter">Choose file</label>
				</div>
			</div>
			<button type="button" class="btn btn-primary btn-sm" id="btnPreviewFile">View</button>
			<span style="margin-left:150px" id="offerValidation" class="text-danger"></span>
		</div>
		<br />
		<div class="input-group col-md-12">
			@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-4" })
			<div class="col-md-6">
				@Html.TextAreaFor(model => model.Description, new { @class = "form-control col-md-12", rows = 2 }) <!-- Adjust 'rows' attribute as needed -->
				<span id="DescriptionValidation" class="text-danger"></span>
				@*@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })*@
			</div>
		</div>
		<br />
		<div class="row justify-content-center">
			<div class="col-md-4 text-center">
				<!-- Added text-center class for centering content -->
				<button type="button" class="btn btn-success btn-block" id="btnSave">Save</button>
			</div>
		</div>
		<br />

	</div>
	<!-- Add this script to define the displayPdf function -->
	<script>
		$(document).ready(function () {
			$("#btnPreviewFile").hide(); // Initially hide the "View" button

			$("#btnPreviewFile").on("click", function () {
				var documentInput = $("#offerLetter")[0];
				var documentFile = documentInput.files.length > 0 ? documentInput.files[0] : null;

				if (documentFile) {
					var reader = new FileReader();

					reader.onload = function (e) {
						var documentData = new Uint8Array(e.target.result);

						// Check the file type
						if (documentFile.type === 'application/pdf') {
							openPdfInNewTab(documentData);
						} else if (documentFile.type === 'application/msword' || documentFile.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
							openWordInNewTab(documentData);
						} else {
							alert('Unsupported document type. Unable to preview.');
						}
					};

					// Read the file as an ArrayBuffer
					reader.readAsArrayBuffer(documentFile);
				} else {
					alert('No document selected for preview.');
				}
			});

			function openPdfInNewTab(pdfData) {
				// Create a Blob from the PDF data
				var blob = new Blob([pdfData], { type: 'application/pdf' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the PDF
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}

			function openWordInNewTab(wordData) {
				// Create a Blob from the Word data
				var blob = new Blob([wordData], { type: 'application/msword' });

				// Create a URL for the Blob
				var url = URL.createObjectURL(blob);

				// Open a new window or tab with the Word document
				window.open(url, '_blank');

				// Release the URL object when it's no longer needed
				URL.revokeObjectURL(url);
			}
		});
	</script>


	<script>
		function updateFileName(input) {
			var fileName = input.value.split('\\').pop();
			$(input).next('.custom-file-label').html(fileName);
		}

		$(document).ready(function () {
			$("#CTCInput").val("");
			$("btnPreviewFile").hide();
			$("input[data-bootstrap-switch]").each(function () {
				$(this).bootstrapSwitch('state', $(this).prop('checked'));
			})

			$("#CTCInput").on("input", function () {
				var value = $(this).val();
				// Check if the length exceeds 6 characters (including the decimal point)
				if (value.length > 5) {
					// Truncate the value to the allowed length
					$(this).val(value.substr(0, 5));
				}

				// Use a regular expression to allow only valid numeric format
				var regex = /^\d{0,2}(\.\d{0,2})?$/;

				if (!regex.test($(this).val())) {
					// Display validation error message
					$("#CTCValidation").text("Please enter a valid CTC in the format 99.99.");
				} else {
					$("#CTCValidation").text("");
				}
			});
		});
	</script>
	<script>
		$(document).ready(function () {
			$("#my-checkbox").on("switchChange.bootstrapSwitch", function (event, state) {
				if (state) {
					$("#ctc-section").show();
					$("#offer-section").show();

					// Clear values when switching to Accept
					$("#CTCInput").val("");
					$("#offerLetter").val("");
					$("#Description").val("");
				} else {
					$("#ctc-section").hide();
					$("#offer-section").hide();

					// Clear values when switching to Reject
					$("#CTCInput").val("");
					$("#offerLetter").val("");
					$("#Description").val("");
				}

				// Reset validation messages
				$("#CTCValidation").text("");
				$("#offerValidation").text("");
				$("#DescriptionValidation").text("");
			});
		});
	</script>
	<script>
		$(document).ready(function () {
			$("#offerLetter").on("change", function () {
				// Reset offerValidation message when a file is selected
				$("#offerValidation").text("");
				$("#btnPreviewFile").show();
			});
			$("#btnSave").on("click", function () {
				console.log("Save button clicked");
				var ctcValue = parseFloat($("#CTCInput").val());
				var feedbackStatus = $("#my-checkbox").bootstrapSwitch("state");
				if (feedbackStatus) { // If Accept
					// Reset validation messages
					$("#CTCValidation").text("");
					$("#offerValidation").text("");
					$("#DescriptionValidation").text("");

					if (isNaN(ctcValue) || ctcValue <= 0) {
						$("#CTCValidation").text("Please enter a valid CTC in number format.");
						$("#CTCInput").focus();
						return;
					}
					var offerLetterInput = $("#offerLetter")[0]; // Get the DOM element
					var offerLetter = offerLetterInput.files.length > 0 ? offerLetterInput.files[0] : null;

					var description = $("#Description").val();

					if (!offerLetter) {
						$("#offerValidation").text("Please choose an offer letter.");
						$("#offerLetter").focus();
						return;

					}

					if (!description) {
						$("#DescriptionValidation").text("Please provide a description.");
						$("#Description").focus();
						return;
					}
				} else { // If Reject
					var description = $("#Description").val();

					if (!description) {
						$("#DescriptionValidation").text("Please provide a description.");
						$("#Description").focus();

						return;
					}
				}


				// Display SweetAlert confirmation dialog
				Swal.fire({
					title: 'Are you sure?',
					text: 'Do you want to save this data?',
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Yes, save it!',
					customClass: {
						container: 'small-sweetalert-container',
						title: 'small-sweetalert-title',
						content: 'small-sweetalert-content',
						confirmButton: 'small-sweetalert-confirm-button',
						cancelButton: 'small-sweetalert-cancel-button'
					}
				}).then((result) => {
					if (result.isConfirmed) {
						// User clicked "Yes, save it!"
					
						// ... Perform other checks if needed ...
						var statusCode = feedbackStatus ? 57 : 61;
						// Prepare data to send to the server
						// Prepare data to send to the server using FormData
						var formData = new FormData();
						formData.append("PlacementId", $("#PlacementId").val());
						formData.append("CTC_LPA", $("#CTCInput").val());
						formData.append("StudentName", $("#StudentName").val());
						formData.append("CompanyName", $("#CompanyName").val());
						formData.append("FeedbackStatus", statusCode);
						formData.append("OfferLetter", offerLetter); // Append the file directly
						formData.append("Description", $("#Description").val());

						console.log("Preparing to make AJAX call...");

						// Make an AJAX call to the server to save the data
						$.ajax({
							type: "POST",
							url: "/Placement/AcceptORRejectOfferAsyncSN", // Replace with the actual controller and action
							data: formData,
							contentType: false, // Set content type to false for FormData
							processData: false, // Prevent jQuery from processing the data
							success: function (result) {
								// Handle the success response from the server
								console.log("Save successful");
								displayToast('Data saved successfully!', 'success');

								// Wait for the toast to be shown before redirecting
								setTimeout(function () {
									$("#resultModal").modal("hide"); // Replace "myModal" with the actual ID of your modal
									window.location.href = '/Placement/ListAllInterviewAsyncSN'; // Replace '/home' with the URL you want to redirect to
								}, 2000); // Adjust the timeout value as needed
							},
							error: function (error) {
								// Handle the error response from the server
								console.error("Save failed", error);
								// You can show an error message or perform other actions as needed
							}
						});
					}
				});
			});
		});
	</script>
	<script>
		function displayToast(message, type) {
			// Display Toastr notification
			toastr[type](message);
		}

		toastr.options = {
			closeButton: true,
			progressBar: true,
			positionClass: 'toast-top-right',
			showMethod: 'slideDown',
			timeOut: 4000 // How long the toast will be displayed (in milliseconds)
		};
	</script>
</body>
</html>

