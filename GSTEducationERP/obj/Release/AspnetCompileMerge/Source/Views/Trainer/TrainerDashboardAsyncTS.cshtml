
@model GSTEducationERPLibrary.Trainer.Trainer
@{
    ViewBag.Title = "TrainerDashboardAsyncTS";
     Layout = "~/Views/Shared/_LayoutERP.cshtml";
}
<html>
<head>
    <title>Counts Display</title>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title - GSTEducationERP</title>
    <script src="~/Content/plugins/jquery/jquery.min.js"></script>

    @*<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.js"></script>*@
    <script src="~/Content/plugins/chart.js/Chart.min.js"></script>
    @*<link href="~/Content/bootstrap.css" rel="stylesheet" />*@
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
        }


        .small-box .inner h3 {
            font-size: 1.5em; /* Adjust the font size as needed */
            margin-bottom: 0.2em; /* Adjust the bottom margin as needed */
        }

        .small-box .inner p {
            font-size: 0.8em; /* Adjust the font size of the description as needed */
        }
    </style>

</head>
<body style="background-color: white;">

    @*<div class="container" style="margin-left: 50px; ">*@
    <div>

        <div class="content-header">
            <div class="card">



                <div class="row mb-4">
                    <div class="col-lg-3 col-6">
                        <!-- small box -->
                        <div class="small-box bg-danger">
                            <div class="inner">
                                <h3><span id="totalBatchCount">@Model.TotalBatchCount</span></h3>

                                <p style="font-size: 1.2em;">Total Batch</p>
                            </div>


                        </div>
                    </div>


                    <!-- Total Student Count -->
                    <div class="col-lg-3 col-6 ">
                        <div class="small-box bg-success">
                            <div class="inner">
                                <h3><span id="totalStudentCount">@Model.TotalStudentCount</span></h3>
                                <p style="font-size: 1.2em;">Total Student </p>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-3 col-6 ">
                        <div class="small-box bg-warning ">
                            <div class="inner">
                                <h3><span id="ActiveBatchCount">@Model.ActiveBatchCount</span></h3>
                                <p style="font-size: 1.2em;">Active Batch </p>
                            </div>
                        </div>
                    </div>

                    <!-- Release Batch Count -->
                    <div class="col-lg-3 col-6 fadeIn">
                        <div class="small-box bg-danger ">
                            <div class="inner">
                                <h3><span id="ReleaseBatchCount">@Model.ReleaseBatchCount</span></h3>
                                <p style="font-size: 1.2em;">Release Batch </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <!-- Upcoming Batch Count -->
                    <div class="col-lg-3 col-6 fadeIn">
                        <div class="small-box bg-primary ">
                            <div class="inner">
                                <h3><span id="UpcomingBatchCount">@Model.UpcomingBatchCount</span></h3>
                                <p style="font-size: 1.2em;">Upcoming Batch </p>
                            </div>
                        </div>
                    </div>

                    <!-- Active Student Count -->
                    <div class="col-lg-3 col-6 ">
                        <div class="small-box bg-secondary ">
                            <div class="inner">
                                <h3><span id="ActiveStudent">@Model.ActiveStudent</span></h3>
                                <p style="font-size: 1.2em;">Active Student </p>
                            </div>
                        </div>
                    </div>

                    <!-- Release Student Count -->
                    <div class="col-lg-3 col-6 ">
                        <div class="small-box bg-dark ">
                            <div class="inner">
                                <h3><span id="ReleaseStudent">@Model.ReleaseStudent</span></h3>
                                <p style="font-size: 1.2em;">Release Student </p>
                            </div>
                        </div>
                    </div>

                    <!-- Placed Student Count -->
                    <div class="col-lg-3 col-6 ">
                        <div class="small-box bg-success  " style="background-color: rgba(0, 128, 0, 0.7);">
                            <div class="inner">
                                <h3><span id="PlacedStudent">@Model.PlacedStudent</span></h3>
                                <p style="font-size: 1.2em;">Placed Student </p>
                            </div>
                        </div>
                    </div>
                    <!--  Graph -->

                    <div class="col-lg-8 fadeIn d-flex justify-content-end">
                        <div class="card bg-light" style="margin-left: auto;">
                            <div id="container"></div>
                        </div>
                    </div>

                </div>

            </div>
        </div>

    </div>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    <script src="https://code.highcharts.com/modules/accessibility.js"></script>
    <script src="~/Content/plugins/chart.js/Chart.js"></script>
    <link href="~/Content/plugins/chart.js/Chart.min.css" rel="stylesheet" />
    <script>
    // Function to render the graph
    function renderGraph() {
        var graphData = @Html.Raw(Json.Encode(Model.GraphData)); // Convert C# model data to JavaScript object

        var batchNames = graphData.map(function (item) { return item.BatchName; });
        var noOfStudents = graphData.map(function (item) { return item.NoOfStudent; });

        Highcharts.chart('container', {
            chart: {
                type: 'column'
            },
            title: {
                text: 'Batch vs Number of Students'
            },
            xAxis: {
                categories: batchNames,
                title: {

                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: 'Number of Students'
                }
            },
            plotOptions: {
                column: {
                    pointWidth: 25 // Allow Highcharts to determine column width
                }
            },
            series: [{
                name: 'Batch Name',
                data: noOfStudents,
                color: 'rgba(0, 0, 255, 0.8)'
            }]
        });
    }

    // Call the renderGraph function when the document is ready
    $(document).ready(function () {
        renderGraph();
    });
    </script>


    <script>
        // Function to animate counter
        function animateCounter(element, targetValue, duration) {
            let currentValue = parseInt(element.textContent);
            let increment = Math.ceil(targetValue / (duration / 100));
            let counter = setInterval(function () {
                currentValue += increment;
                element.textContent = currentValue;
                if (currentValue >= targetValue) {
                    clearInterval(counter);
                    element.textContent = targetValue;
                }
            }, 10);
        }

        // Get all elements with IDs corresponding to counts
        let countElements = document.querySelectorAll('[id^="totalBatchCount"], [id^="totalStudentCount"], [id^="ActiveBatchCount"], [id^="ReleaseBatchCount"], [id^="UpcomingBatchCount"], [id^="ActiveStudent"], [id^="ReleaseStudent"], [id^="PlacedStudent"]');

        // Iterate through each count element and animate
        countElements.forEach(function (element) {
            // Get target value
            let targetValue = parseInt(element.textContent);
            // Set count to 0 initially
            element.textContent = 0;
            // Animate counter
            animateCounter(element, targetValue, 2000); // Change duration as needed (in milliseconds)
        });
    </script>

</body>

</html>