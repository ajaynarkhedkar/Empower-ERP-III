@model GSTEducationERPLibrary.Trainer.Trainer
@{
    ViewBag.Title = "DetailStudentLeaveAsyncYT";
}
<html>
<head>
    <style>
        h4 {
            padding-top: 10px;
            margin-bottom: 10px;
            font-family: Verdana;
            font-weight: bold;
            font-size: medium;
            color: #33CCCC;
        }
    </style>
</head>
<body>
    @using (Html.BeginForm("EditStudentLeaveAsyncYT", "Trainer", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>Update Leave</h4>
            <hr />
            <div class="card p-3">
                @Html.HiddenFor(model => model.ApplyLeaveId)
                <div class="input-group" hidden="hidden">
                    @Html.LabelFor(model => model.StudentCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @Html.EditorFor(model => model.StudentCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StudentCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.BatchName, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.BatchName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.BatchName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.TextBoxFor(model => model.StartDate, "{0:yyyy-MM-dd}", new { @class = "form-control col-md-12", id = "StartDate", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.TextBoxFor(model => model.EndDate, "{0:yyyy-MM-dd}", new { @class = "form-control col-md-12", id = "EndDate", @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="input-group mb-3">
                    @Html.LabelFor(model => model.StatusId, "Status", htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.Status, "Value", "Text"), new { @class = "form-control", id = "Status" })
                        @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group" style="display: flex; justify-content:center">
                    <div class="col-md-offset-2 col-md-2">
                        <input type="submit" value="Save" class="btn btn-success btn-sm" />
                    </div>
                </div>
            </div>
        </div>
    }
    <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
        <script>
            $(document).ready(function () {
                $('form').submit(function (e) {
                    e.preventDefault(); // Prevent form submission

                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You are about to update leave.",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, update it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            var form = $(this);
                            $.ajax({
                                url: form.attr('action'),
                                type: form.attr('method'),
                                data: form.serialize(),
                                success: function (response) {
                                    Swal.fire({
                                        title: 'Success!',
                                        text: 'Leave updated successfully.',
                                        icon: 'success'
                                    }).then(() => {
                                        window.location.href = '/Trainer/ListAttendanceAsyncYT'; // Replace Controller and AnotherAction with your actual controller and action
                                    });
                                },
                                error: function () {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'Failed to update leave.',
                                        icon: 'error'
                                    });
                                }
                            });
                        }
                    });
                });
            });
        </script>
</body>
</html >
