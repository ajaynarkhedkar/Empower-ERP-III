@model GSTEducationERPLibrary.Placement.Placement

@using (Html.BeginForm())
{
    <html>
    <head>
        <style>
            .rating-label {
                display: inline-block;
                width: 180px;
            }

            .rating-dropdown {
                width: 200px;
                display: inline-block;
            }

            .star-rating {
                display: inline-block;
                font-size: 30px;
                color: gold;
            }

            .golden-star {
                color: gold;
            }

            #placementMessage {
                display: none;
                margin-top: 10px;
            }

            .attendance {
                width: 70px;
                height: 30px; /* Adjust the height as needed */
                font-size: 12px; /* Adjust the font size as needed */
            }

            .custom-size {
                width: 70px;
                height: 25px;
            }
        </style>
        <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="~/Content/plugins/bootstrap-switch/js/bootstrap-switch.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>

        <!-- Bootstrap 4 -->

        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <!-- Tempusdominus Bootstrap 4 -->
        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>
        <script>
    $(document).ready(function () {
        $("input[data-bootstrap-switch]").each(function () {
            $(this).bootstrapSwitch('state', $(this).prop('checked'));
        });
        $('.rating-dropdown').val('');
        updateStarRating(0);

        var selectedDropdowns = 0;

        $(".rating-dropdown").change(function () {
            if ($(this).val() !== "") {
                selectedDropdowns++;
            } else {
                selectedDropdowns--;
            }
            updateStarRatingIfAllSelected();
        });

        function updateStarRatingIfAllSelected() {
            if (selectedDropdowns === 4) {
                calculateFinalPerformanceRating();
            } else {
                // If any dropdown is unselected, show all blank stars
                updateStarRating(0);
            }
        }

        function calculateFinalPerformanceRating() {
            var communicationRating = parseInt($("#CommunicationRating").val()) || 0;
            var technicalRating = parseInt($("#TechnicalRating").val()) || 0;
            var confidenceRating = parseInt($("#ConfidenceRating").val()) || 0;
            var projectKnowledgeRating = parseInt($("#ProjectKnowledgeRating").val()) || 0;

            var totalScore = communicationRating + technicalRating + confidenceRating + projectKnowledgeRating;

            // Update hidden field with the calculated total score
            $("#TotalScore").val(totalScore);

            // Update the star rating representation
            updateStarRating(totalScore);
        }

        function updateStarRating(totalScore) {
            // Clear the star rating container
            $("#finalRatingContainer").empty();

            // Calculate the percentage based on the total possible score (40 in this case)
            var percentage = (totalScore / 40) * 100;

            // Map the percentage to the number of stars (assuming 5 stars)
            var stars = Math.ceil((percentage / 100) * 5);

            // Ensure the number of stars is within the range of 0 to 5
            stars = Math.min(Math.max(stars, 0), 5);

            // Display the stars
            for (var i = 1; i <= 5; i++) {
                if (i <= stars) {
                    $("#finalRatingContainer").append("★"); // Full star
                } else {
                    $("#finalRatingContainer").append("☆"); // Empty star
                }
            }
        }

        function determinePerformanceRating(totalScore) {
            if (totalScore >= 1 && totalScore <= 3) {
                return "Low";
            } else if (totalScore > 3 && totalScore <= 5) {
                return "Average";
            } else if (totalScore > 5 && totalScore <= 7) {
                return "Good";
            } else if (totalScore > 7 && totalScore <= 9) {
                return "Better";
            } else if (totalScore === 10) {
                return "Best";
            } else {
                console.error("Error: Unable to determine performance rating. Total score: " + totalScore);
                return "-";
            }
        }

        // Attach a click event handler to the Add button
        $("#addButton").off("click").on("click", function (event) {
            event.preventDefault(); // Prevent default form submission

            // Check if a student is selected before allowing attendance
            var studentName = $("#StudentName option:selected").text().trim();
            if (studentName === "---Select Student---") {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please select a student from the dropdown before giving attendance.'
                });
                return;
            }

            // Check if attendance is marked as Present
            debugger;
            var attendanceStatus = $("#my-checkbox").bootstrapSwitch('state') ? "Present" : "Absent";
            if (attendanceStatus === "Present") {
                // Check if all ratings are provided
                var communicationRating = parseInt($("#CommunicationRating").val()) || 0;
                var technicalRating = parseInt($("#TechnicalRating").val()) || 0;
                var confidenceRating = parseInt($("#ConfidenceRating").val()) || 0;
                var projectKnowledgeRating = parseInt($("#ProjectKnowledgeRating").val()) || 0;

                if (communicationRating === 0 || technicalRating === 0 || confidenceRating === 0 || projectKnowledgeRating === 0) {
                    Swal.fire({
                        icon: 'error',
                      /*  title: 'Oops...',*/
                        text: 'Please give rating before adding the student.'
                    });
                    return;
                }
            }

            // Add the details to the table
            addTableRow();
        });

        // Function to add a new row to the table
        function addTableRow() {
            debugger;
            var studentName = $("#StudentName option:selected").text();
            var studentCode = $("#StudentName").val();
            var attendanceStatus = $("#my-checkbox").bootstrapSwitch('state') ? "Present" : "Absent";
            var communicationRating = parseInt($("#CommunicationRating").val()) || 0;
            var technicalRating = parseInt($("#TechnicalRating").val()) || 0;
            var confidenceRating = parseInt($("#ConfidenceRating").val()) || 0;
            var projectKnowledgeRating = parseInt($("#ProjectKnowledgeRating").val()) || 0;
            var totalScore = (communicationRating + technicalRating + confidenceRating + projectKnowledgeRating) / 4;
            var performanceRating = determinePerformanceRating(totalScore);
            var attendanceValue = $("#my-checkbox").bootstrapSwitch('state') ? "30" : "31";

            var newRow = "<tr>" +
                "<td>" + studentName + "</td>" +
                "<td hidden>" + studentCode + "</td>" +
                "<td>" + attendanceStatus + "</td>" +
                "<td>" + performanceRating + "</td>" +
                "<td hidden>" + attendanceValue + "</td>" + // Adding the hidden value to the table
                "<td><button class='btn btn-danger btn-sm deleteRow custom-size'>Remove</button></td>" +
                "</tr>";


            $("#ratingsTable tbody").append(newRow);

            // Remove the selected student from the dropdown
            $("#StudentName option:selected").remove();

            // Refresh attendance checkbox and all rating dropdowns
            $("#StudentName").val(""); // Reset the selected student
            $("#my-checkbox").bootstrapSwitch('state', true); // Reset the attendance checkbox

            // Reset all rating dropdowns
            $(".rating-dropdown").val("");
            selectedDropdowns = 0; // Reset the selectedDropdowns count
            updateStarRatingIfAllSelected(); // Update star rating accordingly
        }

        // Add a delegated click event handler for deleting rows
        $("#ratingsTable").on("click", ".deleteRow", function () {
            // Get the student name before deleting the row
            var studentNameToDelete = $(this).closest("tr").find('td:first-child').text();

            // Remove the corresponding row when the delete button is clicked
            $(this).closest("tr").remove();

            // Call the function to add the student back to the dropdown
            addStudentBackToDropdown(studentNameToDelete);
        });

        // Function to add the student back to the dropdown
        function addStudentBackToDropdown(studentName) {
            // Check if the student is not already present in the dropdown
            if ($("#StudentName option[value='" + studentName + "']").length === 0) {
                $("#StudentName").append($("<option>", {
                    value: studentName,
                    text: studentName
                }));
            }
        }

        // Add change event listener to the student dropdown
        $("#StudentName").change(function () {
            // Reset all rating dropdowns when a new student is selected
            $(".rating-dropdown").val("");
            selectedDropdowns = 0; // Reset the selectedDropdowns count
            updateStarRatingIfAllSelected(); // Update star rating accordingly

            // Reset the attendance checkbox state
            $("#my-checkbox").bootstrapSwitch('state', true);
        });

        // Add change event listener to the attendance checkbox
        $("#my-checkbox").on('switchChange.bootstrapSwitch', function () {
            // Reset all rating dropdowns when the attendance checkbox changes
            $(".rating-dropdown").val("");
            selectedDropdowns = 0; // Reset the selectedDropdowns count
            updateStarRatingIfAllSelected(); // Update star rating accordingly

            // Disable or enable rating dropdowns based on attendance status
            $(".rating-dropdown").prop("disabled", !$(this).bootstrapSwitch('state'));

        });

        // Add click event listener to the save button
        $("#saveButton").click(function () {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to save the mock performance data.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, save it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    saveData();
                }
            });
        });

        // Function to save the data
        function saveData() {
            var studentDataArray = [];
            debugger;
            $("#ratingsTable tbody tr").each(function () {
                debugger;
                var studentCode = $(this).find("td:eq(1)").text();
                var performanceRating = $(this).find("td:eq(3)").text()
                var attendanceValue = $(this).find("td:eq(4)").text()

                var studentData = {
                    MockId: "@Model.MockId",
                    StudentCode: studentCode,
                    PerformanceStatus: performanceRating,
                    AttendanceId: attendanceValue
                };

                studentDataArray.push(studentData);
            });

            console.log(studentDataArray);

            $.ajax({
                url: '/Placement/AddInternalMockPerformanceSHAsync',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(studentDataArray),
                success: function (response) {
                    if (response && response.success) {
                        // Success message
                        Swal.fire({
                            title: 'Save Successful',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            // Redirect to the mock page
                            window.location.href = '/Placement/ListAllMock';
                        });
                    } else {
                        // Handle other cases if needed
                        // For example, if response.success is false or if there's another error condition
                    }
                },
                error: function (error) {
                    console.log(error);
                    // Handle error if needed
                    // For example, showing an error message to the user
                }
            });
        }

    });
        </script>
    </head>

    <body>
        <div class="card-body">
            <h2>Add Mock Performance</h2>
            <hr />
            <div class="card m-2">
                <div class="card-body">

                    <div class="row">
                        <div class="col-md-6">
                            <label class="control-label">Course:</label>
                            @Html.DisplayFor(model => model.CourseName)
                        </div>
                        <div class="col-md-6">
                            <label class="control-label">Batch:</label>
                            @Html.DisplayFor(model => model.BatchName)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label class="control-label">Mock Name:</label>
                            @Html.DisplayFor(model => model.MockName)
                        </div>
                        <div class="col-md-6">
                            <label class="control-label">Mock Date:</label>
                            @Html.DisplayFor(model => model.MDate)
                        </div>
                    </div>


                    <div class="card pl-8 mx-auto col-md-10">
                        <div class="card-body">
                            @Html.HiddenFor(model => model.MockId, new { id = "MockId" })
                            @Html.HiddenFor(model => model.StatusId)
                            @Html.HiddenFor(model => model.StudentCode)

                            <div class="form-group row">
                                @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.StudentCode, new SelectList(ViewBag.StudentList1, "Value", "Text"), "---Select Student---", new { @class = "form-control col-md-12", id = "StudentName" })
                                    @Html.ValidationMessageFor(model => model.StudentCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.Attendance, "Attendance", htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    <input type="checkbox" id="my-checkbox" name="my-checkbox" checked data-bootstrap-switch data-off-color="danger" data-on-color="success" data-on-text="Present" data-off-text="Absent" class="form-control col-md-12 attendance">
                                    @Html.HiddenFor(model => model.AttendanceId, new { id = "AttendanceId" })
                                </div>
                            </div>


                            <div class="form-group row">
                                @Html.LabelFor(model => model.CommunicationRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.CommunicationRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.TechnicalRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.TechnicalRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.TechnicalRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.ConfidenceRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.ConfidenceRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.ConfidenceRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                @Html.LabelFor(model => model.ProjectKnowledgeRating, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-6">
                                    @Html.DropDownListFor(model => model.ProjectKnowledgeRating, Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), new { @class = "form-control rating-dropdown col-md-12" })
                                    @Html.ValidationMessageFor(model => model.ProjectKnowledgeRating, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @Html.LabelFor(model => model.PerformanceStatus, "Performance", htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="star-rating" id="finalRatingContainer"></div>
                            <div class="row g-6 justify-content-end">
                                <button type="button" class="btn btn-primary" id="addButton" style="width: 80px; height: 30px; font-size: 12px;">Add</button>
                            </div>
                            <br />
                        </div>
                    </div>

                    <div style="height: 100px; overflow-y: auto;">
                        <table id="ratingsTable" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Student Name</th>
                                    <th>Attendance</th>
                                    <th>Performance</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Your table data here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="offset-md-5 col-md-12">
                <input type="button" class="btn btn-success" value="Save" id="saveButton" style="margin-right:20px" />
            </div>
        </div>
        <br />
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ListAllMock")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </body>
</html>
}