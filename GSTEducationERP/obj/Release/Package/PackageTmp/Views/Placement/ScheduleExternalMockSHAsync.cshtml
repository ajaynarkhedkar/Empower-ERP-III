
@model GSTEducationERPLibrary.Placement.Placement
@{
    ViewBag.Title = "ScheduleExternalMockSHAsync";
  //  Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <html>
    <head>
        <script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
        <script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>

        <link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
        <script src="~/Content/plugins/toastr/toastr.min.js"></script>

        <!-- Bootstrap 4 -->

        <script src="~/Content/plugins/moment/moment.min.js"></script>
        <!-- Tempusdominus Bootstrap 4 -->
        <script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
        <script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>
        <style>
            .datetimepicker-input {
                pointer-events: none;
            }
        </style>

        <script type="text/javascript">
            $(document).ready(function () {
                $("#MockId").change(function () {
                    var id = $(this).val();
                    $("#SelectedStudentCodes").empty();
                    $.ajax({
                        url: "/Placement/ExtStudentBindSHAsync",
                        type: "GET",
                        data: { MockId: id },
                        success: function (data) {
                            var v = "<option>---Select---</option>";
                            $.each(data, function (i, v1) {
                                v += "<option value='" + v1.Value + "'>" + v1.Text + "</option>";
                            });
                            $("#SelectedStudentCodes").html(v);
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                        }
                    });
                });

                $("#SelectedStudentCodes").change(function () {
                    var studentCode = $(this).val();
                    $.ajax({
                        url: "/Placement/GetStudentDetailsAsync",
                        type: "GET",
                        data: { studentCode: studentCode },
                        success: function (data) {
                            // Clear existing table data
                            $("#studentDetailsBody").empty();

                            // Append new rows with student details
                            $.each(data, function (i, student) {
                                var row = "<tr>" +
                                    "<td>" + student.CompanyName + "</td>" +
                                    "<td>" + student.DesignationName + "</td>" +
                                    "<td>" + student.Experience + "</td>" +
                                    // Add more columns as needed
                                    "</tr>";
                                $("#studentDetailsBody").append(row);
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error(xhr.responseText);
                        }
                    });
                });
                $('#timepicker').datetimepicker({
                    format: 'LT'
                });

                $('#reservationdate').datetimepicker({
                    format: 'YYYY-MM-DD',
                    minDate: moment().startOf('day')
                });

                $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });
                $('#timepicker, #SelectedDuration').on('change', function () {
                    calculateEndTime();
                });

                // Function to calculate end time based on start time and duration
                function calculateEndTime() {
                    debugger
                    var startTime = $('#timepicker').val();
                    var duration = $('#SelectedDuration').val();

                    // Check if start time and duration are not empty
                    if (startTime && duration) {
                        // Parse duration to get hours and minutes
                        var durationHours = parseInt(duration.split(':')[0]);
                        var durationMinutes = parseInt(duration.split(':')[1]);

                        // Parse start time to get hours and minutes
                        var startTimeHours = parseInt(startTime.split(':')[0]);
                        var startTimeMinutes = parseInt(startTime.split(':')[1]);

                        // Calculate end time hours and minutes
                        var endTimeHours = startTimeHours + durationHours;
                        var endTimeMinutes = startTimeMinutes + durationMinutes;

                        // Adjust end time if minutes overflow 60
                        if (endTimeMinutes >= 60) {
                            endTimeHours += 1;
                            endTimeMinutes -= 60;
                        }

                        // Format end time
                        var endTime = ('0' + endTimeHours).slice(-2) + ':' + ('0' + endTimeMinutes).slice(-2);

                        // Display end time
                        $('#endTime').val(endTime);
                        fetchLabs();
                    } else {
                        $('#endTime').val('');
                    }
                }
                function fetchLabs() {
                    debugger;
                    // Get the values of MockDate, StartTime, EndTime, and BatchCode
                    var mockDate = $('#MockDate').val();
                    var startTime = $('#timepicker').val();
                    var endTime = $('#endTime').val();

                    // Make an AJAX request to fetch labs based on the parameters
                    $.ajax({
                        url: '/Placement/ReadAvailableLabBatch_Bind', // Update the URL to your server endpoint
                        method: 'POST',
                        data: {

                            StartDate: mockDate,
                            StartTime: startTime,
                            EndTime: endTime
                                
                        },
                        success: function (data) {
                            debugger;
                            var result = JSON.parse(data);
                            var v = "<option>---Select---</option>";
                            $.each(result, function (i, item) {
                                v += "<option value='" + item.LabCode + "'>" + item.LabName + "</option>";
                            });
                            $("#LabCode").html(v);
                        }
                    });
                }
            });
        </script>
        <script>

            var saveButton = $('#saveButton');

            // Add a click event listener to the save button
            saveButton.click(async function (event) {
                event.preventDefault(); // Prevent the default form submission
                // Get form data
                debugger;
                var mockName = $('#MockId').val();
                var studentCode = $('#SelectedStudentCodes').val();
                var mockDate = $('#MockDate').val();
                var interviewerName = $('#StaffCode').val();
                var startTime = $('#timepicker').val();
                var labName = $('#LabCode').val();


                // Validate form data
                if (mockName.trim() === '' || studentCode.trim() === '' || mockDate.trim() === '' || interviewerName.trim() === '' || startTime.trim() === '' || labName.trim() === '') {
                    Swal.fire('Error', 'Please fill in all fields.', 'error');
                    return;
                }

                // Show confirmation dialog
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'You are about to schedule your mock.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, save it!'
                }).then(async (result) => {
                    // If the user clicks "Yes, save it!" execute your save logic here
                    if (result.isConfirmed) {
                        // Prepare form data to send to the server
                        debugger;
                        var formData = new FormData();
                        formData.append('MockId', mockName);
                        formData.append('SelectedStudentCodes', studentCode); // Adjusted to SelectedStudentCodes
                        formData.append('MockDate', mockDate);
                        formData.append('StaffCode', interviewerName);
                        formData.append('StartTime', startTime);
                        formData.append('LabCode', labName)

                        try {
                            // Send form data to the server using Fetch API
                            var response = await fetch('/Placement/ScheduleExternalMockSHAsync', {
                                method: 'POST',
                                body: formData
                            });
                             if (response.ok) {
                            // Success message
                            Swal.fire({
                                title: 'Save Successfully',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                window.location.href = '@Url.Action("ListAllMock", "Placement")';
                            });
                        } else {
                            // Handle error
                            Swal.fire({
                                title: 'Error',
                                text: 'An error occurred while assigning the exam.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Handle unexpected error
                        Swal.fire({
                            title: 'Error',
                            text: 'An unexpected error occurred. Please try again later.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                }
            });
        });
  
        </script>

    </head>
    <body>
        <h2>Schedule Mock</h2>
        <hr>
        <div class="card col-md-12">
            <br />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group" style="display:none">
                <div class="col-md-10">
                    <input type="text" name="EndTime" id="endTime" class="form-control" readonly />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.MockName, "Mock Name")
                    @Html.DropDownListFor(model => model.MockId, new SelectList(ViewBag.MockName, "Value", "Text"), "---Select Mock---", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MockId, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.StudentName, "Student Name")
                    @Html.DropDownListFor(model => model.SelectedStudentCodes, new SelectList(Enumerable.Empty<SelectListItem>()), "---Select Student---", new { @class = "form-control col-md-12", id = "SelectedStudentCodes", style = "margin-left: 13px;" })

                    @Html.ValidationMessageFor(model => model.SelectedStudentCodes, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.Experience, "Experience")
                    <table id="studentDetailsTable" class="table-bordered" style="width:50%">
                        <thead>
                            <tr>
                                <th>Company</th>
                                <th>Designation</th>
                                <th>Experience</th>
                            </tr>
                        </thead>
                        <tbody id="studentDetailsBody">
                            <!-- Your table body content goes here -->
                        </tbody>
                    </table>
                </div>


            </div>

            <br />

            <div class="row">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.MockDate, "Mock Date")
                    @Html.EditorFor(model => model.MockDate, new { htmlAttributes = new { @class = "form-control datepicker", min = DateTime.Now.ToString("yyyy-MM-dd"), required = "required", id = "MockDate" } })

                    @Html.ValidationMessageFor(model => model.MockDate, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.StartTime, "MockTime")
                    <div class="input-group date" data-target-input="nearest">
                        <input type="text" name="StartTime" id="timepicker" class="form-control datetimepicker-input" data-target="#timepicker" />
                        <div class="input-group-append" data-target="#timepicker" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="far fa-clock"></i></div>
                        </div>
                    </div>
                </div>


            </div>

            <br />
            <div class="row">

                <div class="col-md-4">
                    @Html.LabelFor(model => model.Duration, "Duration")
                    <input type="time" id="SelectedDuration" name="SelectedDuration" value="@Model.SelectedDuration.ToString("hh\\:mm")" class="form-control" />
                    @Html.ValidationMessageFor(model => model.SelectedDuration, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.LabName, "Lab Name")
                    <select id="LabCode" name="LabCode" class="form-control" required> </select>
                    @Html.ValidationMessageFor(model => model.LabCode, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    @Html.LabelFor(model => model.InterviewrName, "Interviewr Name")
                    @Html.DropDownListFor(model => model.StaffCode, new SelectList(ViewBag.StaffList, "Value", "Text"), "---Select Interviewer---", new { @class = "form-control", id = "StaffCode" })
                    @Html.ValidationMessageFor(model => model.StaffCode, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group row">
                <br />
                <div class="offset-md-5 col-md-12">
                    <input type="button" class="btn btn-success btn-sm" value="Save" id="saveButton" style="margin-right:20px" />

                </div>
            </div>
        </div>
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ListAllMock")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </body>
 
</html>
}
